{"ast":null,"code":"const {\n  generators\n} = require('openid-client');\nconst {\n  signCookie: generateCookieValue,\n  verifyCookie: getCookieValue,\n  getKeyStore\n} = require('./crypto');\nconst COOKIES = require('./cookies');\nclass TransientCookieHandler {\n  constructor({\n    secret,\n    session,\n    legacySameSiteCookie\n  }) {\n    let [current, keystore] = getKeyStore(secret);\n    if (keystore.size === 1) {\n      keystore = current;\n    }\n    this.currentKey = current;\n    this.keyStore = keystore;\n    this.sessionCookieConfig = session && session.cookie || {};\n    this.legacySameSiteCookie = legacySameSiteCookie;\n  }\n\n  /**\n   * Set a cookie with a value or a generated nonce.\n   *\n   * @param {String} key Cookie name to use.\n   * @param {Object} req Express Request object.\n   * @param {Object} res Express Response object.\n   * @param {Object} opts Options object.\n   * @param {String} opts.sameSite SameSite attribute of \"None,\" \"Lax,\" or \"Strict\". Default is \"None.\"\n   * @param {String} opts.value Cookie value. Omit this key to store a generated value.\n   * @param {Boolean} opts.legacySameSiteCookie Should a fallback cookie be set? Default is true.\n   *\n   * @return {String} Cookie value that was set.\n   */\n  store(key, req, res, {\n    sameSite = 'None',\n    value = this.generateNonce()\n  } = {}) {\n    const isSameSiteNone = sameSite === 'None';\n    const {\n      domain,\n      path,\n      secure\n    } = this.sessionCookieConfig;\n    const basicAttr = {\n      httpOnly: true,\n      secure,\n      domain,\n      path\n    };\n    {\n      const cookieValue = generateCookieValue(key, value, this.currentKey);\n      // Set the cookie with the SameSite attribute and, if needed, the Secure flag.\n      res.cookie(key, cookieValue, {\n        ...basicAttr,\n        sameSite,\n        secure: isSameSiteNone ? true : basicAttr.secure\n      });\n    }\n    if (isSameSiteNone && this.legacySameSiteCookie) {\n      const cookieValue = generateCookieValue(`_${key}`, value, this.currentKey);\n      // Set the fallback cookie with no SameSite or Secure attributes.\n      res.cookie(`_${key}`, cookieValue, basicAttr);\n    }\n    return value;\n  }\n\n  /**\n   * Get a cookie value then delete it.\n   *\n   * @param {String} key Cookie name to use.\n   * @param {Object} req Express Request object.\n   * @param {Object} res Express Response object.\n   *\n   * @return {String|undefined} Cookie value or undefined if cookie was not found.\n   */\n  getOnce(key, req, res) {\n    if (!req[COOKIES]) {\n      return undefined;\n    }\n    const {\n      secure,\n      sameSite\n    } = this.sessionCookieConfig;\n    let value = getCookieValue(key, req[COOKIES][key], this.keyStore);\n    this.deleteCookie(key, res, {\n      secure,\n      sameSite\n    });\n    if (this.legacySameSiteCookie) {\n      const fallbackKey = `_${key}`;\n      if (!value) {\n        value = getCookieValue(fallbackKey, req[COOKIES][fallbackKey], this.keyStore);\n      }\n      this.deleteCookie(fallbackKey, res);\n    }\n    return value;\n  }\n\n  /**\n   * Generates a nonce value.\n   *\n   * @return {String}\n   */\n  generateNonce() {\n    return generators.nonce();\n  }\n\n  /**\n   * Generates a code_verifier value.\n   *\n   * @return {String}\n   */\n  generateCodeVerifier() {\n    return generators.codeVerifier();\n  }\n\n  /**\n   * Calculates a code_challenge value for a given codeVerifier\n   *\n   * @param {String} codeVerifier Code Verifier to calculate the code_challenge value from.\n   *\n   * @return {String}\n   */\n  calculateCodeChallenge(codeVerifier) {\n    return generators.codeChallenge(codeVerifier);\n  }\n\n  /**\n   * Clears the cookie from the browser by setting an empty value and an expiration date in the past\n   *\n   * @param {String} name Cookie name\n   * @param {Object} res Express Response object\n   * @param {Object?} opts Optional SameSite and Secure cookie options for modern browsers\n   */\n  deleteCookie(name, res, opts = {}) {\n    const {\n      domain,\n      path\n    } = this.sessionCookieConfig;\n    const {\n      sameSite,\n      secure\n    } = opts;\n    res.clearCookie(name, {\n      domain,\n      path,\n      sameSite,\n      secure\n    });\n  }\n}\nmodule.exports = TransientCookieHandler;","map":{"version":3,"names":["generators","require","signCookie","generateCookieValue","verifyCookie","getCookieValue","getKeyStore","COOKIES","TransientCookieHandler","constructor","secret","session","legacySameSiteCookie","current","keystore","size","currentKey","keyStore","sessionCookieConfig","cookie","store","key","req","res","sameSite","value","generateNonce","isSameSiteNone","domain","path","secure","basicAttr","httpOnly","cookieValue","getOnce","undefined","deleteCookie","fallbackKey","nonce","generateCodeVerifier","codeVerifier","calculateCodeChallenge","codeChallenge","name","opts","clearCookie","module","exports"],"sources":["/Users/chamas/Final-Project/final-project/node_modules/express-openid-connect/lib/transientHandler.js"],"sourcesContent":["const { generators } = require('openid-client');\nconst {\n  signCookie: generateCookieValue,\n  verifyCookie: getCookieValue,\n  getKeyStore,\n} = require('./crypto');\nconst COOKIES = require('./cookies');\n\nclass TransientCookieHandler {\n  constructor({ secret, session, legacySameSiteCookie }) {\n    let [current, keystore] = getKeyStore(secret);\n\n    if (keystore.size === 1) {\n      keystore = current;\n    }\n    this.currentKey = current;\n    this.keyStore = keystore;\n    this.sessionCookieConfig = (session && session.cookie) || {};\n    this.legacySameSiteCookie = legacySameSiteCookie;\n  }\n\n  /**\n   * Set a cookie with a value or a generated nonce.\n   *\n   * @param {String} key Cookie name to use.\n   * @param {Object} req Express Request object.\n   * @param {Object} res Express Response object.\n   * @param {Object} opts Options object.\n   * @param {String} opts.sameSite SameSite attribute of \"None,\" \"Lax,\" or \"Strict\". Default is \"None.\"\n   * @param {String} opts.value Cookie value. Omit this key to store a generated value.\n   * @param {Boolean} opts.legacySameSiteCookie Should a fallback cookie be set? Default is true.\n   *\n   * @return {String} Cookie value that was set.\n   */\n  store(\n    key,\n    req,\n    res,\n    { sameSite = 'None', value = this.generateNonce() } = {}\n  ) {\n    const isSameSiteNone = sameSite === 'None';\n    const { domain, path, secure } = this.sessionCookieConfig;\n    const basicAttr = {\n      httpOnly: true,\n      secure,\n      domain,\n      path,\n    };\n\n    {\n      const cookieValue = generateCookieValue(key, value, this.currentKey);\n      // Set the cookie with the SameSite attribute and, if needed, the Secure flag.\n      res.cookie(key, cookieValue, {\n        ...basicAttr,\n        sameSite,\n        secure: isSameSiteNone ? true : basicAttr.secure,\n      });\n    }\n\n    if (isSameSiteNone && this.legacySameSiteCookie) {\n      const cookieValue = generateCookieValue(\n        `_${key}`,\n        value,\n        this.currentKey\n      );\n      // Set the fallback cookie with no SameSite or Secure attributes.\n      res.cookie(`_${key}`, cookieValue, basicAttr);\n    }\n\n    return value;\n  }\n\n  /**\n   * Get a cookie value then delete it.\n   *\n   * @param {String} key Cookie name to use.\n   * @param {Object} req Express Request object.\n   * @param {Object} res Express Response object.\n   *\n   * @return {String|undefined} Cookie value or undefined if cookie was not found.\n   */\n  getOnce(key, req, res) {\n    if (!req[COOKIES]) {\n      return undefined;\n    }\n\n    const { secure, sameSite } = this.sessionCookieConfig;\n\n    let value = getCookieValue(key, req[COOKIES][key], this.keyStore);\n    this.deleteCookie(key, res, { secure, sameSite });\n\n    if (this.legacySameSiteCookie) {\n      const fallbackKey = `_${key}`;\n      if (!value) {\n        value = getCookieValue(\n          fallbackKey,\n          req[COOKIES][fallbackKey],\n          this.keyStore\n        );\n      }\n      this.deleteCookie(fallbackKey, res);\n    }\n\n    return value;\n  }\n\n  /**\n   * Generates a nonce value.\n   *\n   * @return {String}\n   */\n  generateNonce() {\n    return generators.nonce();\n  }\n\n  /**\n   * Generates a code_verifier value.\n   *\n   * @return {String}\n   */\n  generateCodeVerifier() {\n    return generators.codeVerifier();\n  }\n\n  /**\n   * Calculates a code_challenge value for a given codeVerifier\n   *\n   * @param {String} codeVerifier Code Verifier to calculate the code_challenge value from.\n   *\n   * @return {String}\n   */\n  calculateCodeChallenge(codeVerifier) {\n    return generators.codeChallenge(codeVerifier);\n  }\n\n  /**\n   * Clears the cookie from the browser by setting an empty value and an expiration date in the past\n   *\n   * @param {String} name Cookie name\n   * @param {Object} res Express Response object\n   * @param {Object?} opts Optional SameSite and Secure cookie options for modern browsers\n   */\n  deleteCookie(name, res, opts = {}) {\n    const { domain, path } = this.sessionCookieConfig;\n    const { sameSite, secure } = opts;\n    res.clearCookie(name, {\n      domain,\n      path,\n      sameSite,\n      secure,\n    });\n  }\n}\n\nmodule.exports = TransientCookieHandler;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}