{"ast":null,"code":"const crypto = require('crypto');\nconst {\n  JWKS,\n  JWK,\n  JWS\n} = require('jose');\nconst BYTE_LENGTH = 32;\nconst ENCRYPTION_INFO = 'JWE CEK';\nconst SIGNING_INFO = 'JWS Cookie Signing';\nconst DIGEST = 'sha256';\nconst ALG = 'HS256';\nconst CRITICAL_HEADER_PARAMS = ['b64'];\nlet encryption, signing;\n\n/**\n *\n * Derives appropriate sized keys from the end-user provided secret random string/passphrase using\n * HKDF (HMAC-based Extract-and-Expand Key Derivation Function) defined in RFC 8569.\n *\n * @see https://tools.ietf.org/html/rfc5869\n *\n */\n/* istanbul ignore else */\nif (crypto.hkdfSync) {\n  // added in v15.0.0\n  encryption = secret => Buffer.from(crypto.hkdfSync(DIGEST, secret, Buffer.alloc(0), ENCRYPTION_INFO, BYTE_LENGTH));\n  signing = secret => Buffer.from(crypto.hkdfSync(DIGEST, secret, Buffer.alloc(0), SIGNING_INFO, BYTE_LENGTH));\n} else {\n  const hkdf = require('futoin-hkdf');\n  encryption = secret => hkdf(secret, BYTE_LENGTH, {\n    info: ENCRYPTION_INFO,\n    hash: DIGEST\n  });\n  signing = secret => hkdf(secret, BYTE_LENGTH, {\n    info: SIGNING_INFO,\n    hash: DIGEST\n  });\n}\nconst getKeyStore = (secret, forEncryption) => {\n  let current;\n  const secrets = Array.isArray(secret) ? secret : [secret];\n  let keystore = new JWKS.KeyStore();\n  secrets.forEach((secretString, i) => {\n    const key = JWK.asKey(forEncryption ? encryption(secretString) : signing(secretString));\n    if (i === 0) {\n      current = key;\n    }\n    keystore.add(key);\n  });\n  return [current, keystore];\n};\nconst header = {\n  alg: ALG,\n  b64: false,\n  crit: CRITICAL_HEADER_PARAMS\n};\nconst getPayload = (cookie, value) => Buffer.from(`${cookie}=${value}`);\nconst flattenedJWSFromCookie = (cookie, value, signature) => ({\n  protected: Buffer.from(JSON.stringify(header)).toString('base64').replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_'),\n  payload: getPayload(cookie, value),\n  signature\n});\nconst generateSignature = (cookie, value, key) => {\n  const payload = getPayload(cookie, value);\n  return JWS.sign.flattened(payload, key, header).signature;\n};\nconst verifySignature = (cookie, value, signature, keystore) => {\n  try {\n    return !!JWS.verify(flattenedJWSFromCookie(cookie, value, signature), keystore, {\n      algorithms: [ALG],\n      crit: CRITICAL_HEADER_PARAMS\n    });\n  } catch (err) {\n    return false;\n  }\n};\nconst verifyCookie = (cookie, value, keystore) => {\n  if (!value) {\n    return undefined;\n  }\n  let signature;\n  [value, signature] = value.split('.');\n  if (verifySignature(cookie, value, signature, keystore)) {\n    return value;\n  }\n  return undefined;\n};\nconst signCookie = (cookie, value, key) => {\n  const signature = generateSignature(cookie, value, key);\n  return `${value}.${signature}`;\n};\nmodule.exports.signCookie = signCookie;\nmodule.exports.verifyCookie = verifyCookie;\nmodule.exports.getKeyStore = getKeyStore;\nmodule.exports.encryption = encryption;\nmodule.exports.signing = signing;","map":{"version":3,"names":["crypto","require","JWKS","JWK","JWS","BYTE_LENGTH","ENCRYPTION_INFO","SIGNING_INFO","DIGEST","ALG","CRITICAL_HEADER_PARAMS","encryption","signing","hkdfSync","secret","Buffer","from","alloc","hkdf","info","hash","getKeyStore","forEncryption","current","secrets","Array","isArray","keystore","KeyStore","forEach","secretString","i","key","asKey","add","header","alg","b64","crit","getPayload","cookie","value","flattenedJWSFromCookie","signature","protected","JSON","stringify","toString","replace","payload","generateSignature","sign","flattened","verifySignature","verify","algorithms","err","verifyCookie","undefined","split","signCookie","module","exports"],"sources":["/Users/chamas/Final-Project/final-project/node_modules/express-openid-connect/lib/crypto.js"],"sourcesContent":["const crypto = require('crypto');\nconst { JWKS, JWK, JWS } = require('jose');\n\nconst BYTE_LENGTH = 32;\nconst ENCRYPTION_INFO = 'JWE CEK';\nconst SIGNING_INFO = 'JWS Cookie Signing';\nconst DIGEST = 'sha256';\nconst ALG = 'HS256';\nconst CRITICAL_HEADER_PARAMS = ['b64'];\n\nlet encryption, signing;\n\n/**\n *\n * Derives appropriate sized keys from the end-user provided secret random string/passphrase using\n * HKDF (HMAC-based Extract-and-Expand Key Derivation Function) defined in RFC 8569.\n *\n * @see https://tools.ietf.org/html/rfc5869\n *\n */\n/* istanbul ignore else */\nif (crypto.hkdfSync) {\n  // added in v15.0.0\n  encryption = (secret) =>\n    Buffer.from(\n      crypto.hkdfSync(\n        DIGEST,\n        secret,\n        Buffer.alloc(0),\n        ENCRYPTION_INFO,\n        BYTE_LENGTH\n      )\n    );\n  signing = (secret) =>\n    Buffer.from(\n      crypto.hkdfSync(\n        DIGEST,\n        secret,\n        Buffer.alloc(0),\n        SIGNING_INFO,\n        BYTE_LENGTH\n      )\n    );\n} else {\n  const hkdf = require('futoin-hkdf');\n  encryption = (secret) =>\n    hkdf(secret, BYTE_LENGTH, { info: ENCRYPTION_INFO, hash: DIGEST });\n  signing = (secret) =>\n    hkdf(secret, BYTE_LENGTH, { info: SIGNING_INFO, hash: DIGEST });\n}\n\nconst getKeyStore = (secret, forEncryption) => {\n  let current;\n  const secrets = Array.isArray(secret) ? secret : [secret];\n  let keystore = new JWKS.KeyStore();\n  secrets.forEach((secretString, i) => {\n    const key = JWK.asKey(\n      forEncryption ? encryption(secretString) : signing(secretString)\n    );\n    if (i === 0) {\n      current = key;\n    }\n    keystore.add(key);\n  });\n  return [current, keystore];\n};\n\nconst header = { alg: ALG, b64: false, crit: CRITICAL_HEADER_PARAMS };\n\nconst getPayload = (cookie, value) => Buffer.from(`${cookie}=${value}`);\nconst flattenedJWSFromCookie = (cookie, value, signature) => ({\n  protected: Buffer.from(JSON.stringify(header))\n    .toString('base64')\n    .replace(/=/g, '')\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_'),\n  payload: getPayload(cookie, value),\n  signature,\n});\nconst generateSignature = (cookie, value, key) => {\n  const payload = getPayload(cookie, value);\n  return JWS.sign.flattened(payload, key, header).signature;\n};\nconst verifySignature = (cookie, value, signature, keystore) => {\n  try {\n    return !!JWS.verify(\n      flattenedJWSFromCookie(cookie, value, signature),\n      keystore,\n      { algorithms: [ALG], crit: CRITICAL_HEADER_PARAMS }\n    );\n  } catch (err) {\n    return false;\n  }\n};\nconst verifyCookie = (cookie, value, keystore) => {\n  if (!value) {\n    return undefined;\n  }\n  let signature;\n  [value, signature] = value.split('.');\n  if (verifySignature(cookie, value, signature, keystore)) {\n    return value;\n  }\n\n  return undefined;\n};\n\nconst signCookie = (cookie, value, key) => {\n  const signature = generateSignature(cookie, value, key);\n  return `${value}.${signature}`;\n};\n\nmodule.exports.signCookie = signCookie;\nmodule.exports.verifyCookie = verifyCookie;\n\nmodule.exports.getKeyStore = getKeyStore;\nmodule.exports.encryption = encryption;\nmodule.exports.signing = signing;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}