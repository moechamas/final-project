{"ast":null,"code":"let encode;\nif (Buffer.isEncoding('base64url')) {\n  encode = (input, encoding = 'utf8') => Buffer.from(input, encoding).toString('base64url');\n} else {\n  const fromBase64 = base64 => base64.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n  encode = (input, encoding = 'utf8') => fromBase64(Buffer.from(input, encoding).toString('base64'));\n}\nconst decode = input => Buffer.from(input, 'base64');\nmodule.exports.decode = decode;\nmodule.exports.encode = encode;","map":{"version":3,"names":["encode","Buffer","isEncoding","input","encoding","from","toString","fromBase64","base64","replace","decode","module","exports"],"sources":["/Users/chamas/Final-Project/final-project/node_modules/openid-client/lib/helpers/base64url.js"],"sourcesContent":["let encode;\nif (Buffer.isEncoding('base64url')) {\n  encode = (input, encoding = 'utf8') => Buffer.from(input, encoding).toString('base64url');\n} else {\n  const fromBase64 = (base64) => base64.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n  encode = (input, encoding = 'utf8') => fromBase64(Buffer.from(input, encoding).toString('base64'));\n}\n\nconst decode = (input) => Buffer.from(input, 'base64');\n\nmodule.exports.decode = decode;\nmodule.exports.encode = encode;\n"],"mappings":"AAAA,IAAIA,MAAM;AACV,IAAIC,MAAM,CAACC,UAAU,CAAC,WAAW,CAAC,EAAE;EAClCF,MAAM,GAAGA,CAACG,KAAK,EAAEC,QAAQ,GAAG,MAAM,KAAKH,MAAM,CAACI,IAAI,CAACF,KAAK,EAAEC,QAAQ,CAAC,CAACE,QAAQ,CAAC,WAAW,CAAC;AAC3F,CAAC,MAAM;EACL,MAAMC,UAAU,GAAIC,MAAM,IAAKA,MAAM,CAACC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;EAC/FT,MAAM,GAAGA,CAACG,KAAK,EAAEC,QAAQ,GAAG,MAAM,KAAKG,UAAU,CAACN,MAAM,CAACI,IAAI,CAACF,KAAK,EAAEC,QAAQ,CAAC,CAACE,QAAQ,CAAC,QAAQ,CAAC,CAAC;AACpG;AAEA,MAAMI,MAAM,GAAIP,KAAK,IAAKF,MAAM,CAACI,IAAI,CAACF,KAAK,EAAE,QAAQ,CAAC;AAEtDQ,MAAM,CAACC,OAAO,CAACF,MAAM,GAAGA,MAAM;AAC9BC,MAAM,CAACC,OAAO,CAACZ,MAAM,GAAGA,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}