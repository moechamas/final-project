{"ast":null,"code":"const {\n  generateKeyPairSync,\n  generateKeyPair: async\n} = require('crypto');\nconst {\n  promisify\n} = require('util');\nconst {\n  THUMBPRINT_MATERIAL,\n  JWK_MEMBERS,\n  PUBLIC_MEMBERS,\n  PRIVATE_MEMBERS,\n  KEY_MANAGEMENT_DECRYPT,\n  KEY_MANAGEMENT_ENCRYPT\n} = require('../../help/consts');\nconst {\n  EC_CURVES\n} = require('../../registry');\nconst {\n  keyObjectSupported\n} = require('../../help/runtime_support');\nconst {\n  createPublicKey,\n  createPrivateKey\n} = require('../../help/key_object');\nconst errors = require('../../errors');\nconst Key = require('./base');\nconst generateKeyPair = promisify(async);\nconst EC_PUBLIC = new Set(['crv', 'x', 'y']);\nObject.freeze(EC_PUBLIC);\nconst EC_PRIVATE = new Set([...EC_PUBLIC, 'd']);\nObject.freeze(EC_PRIVATE);\n\n// Elliptic Curve Key Type\nclass ECKey extends Key {\n  constructor(...args) {\n    super(...args);\n    this[JWK_MEMBERS]();\n    Object.defineProperty(this, 'kty', {\n      value: 'EC',\n      enumerable: true\n    });\n    if (!EC_CURVES.has(this.crv)) {\n      throw new errors.JOSENotSupported('unsupported EC key curve');\n    }\n  }\n  static get [PUBLIC_MEMBERS]() {\n    return EC_PUBLIC;\n  }\n  static get [PRIVATE_MEMBERS]() {\n    return EC_PRIVATE;\n  }\n\n  // https://tc39.github.io/ecma262/#sec-ordinaryownpropertykeys no need for any special\n  // JSON.stringify handling in V8\n  [THUMBPRINT_MATERIAL]() {\n    return {\n      crv: this.crv,\n      kty: 'EC',\n      x: this.x,\n      y: this.y\n    };\n  }\n  [KEY_MANAGEMENT_ENCRYPT]() {\n    return this.algorithms('deriveKey');\n  }\n  [KEY_MANAGEMENT_DECRYPT]() {\n    if (this.public) {\n      return new Set();\n    }\n    return this.algorithms('deriveKey');\n  }\n  static async generate(crv = 'P-256', privat = true) {\n    if (!EC_CURVES.has(crv)) {\n      throw new errors.JOSENotSupported(`unsupported EC key curve: ${crv}`);\n    }\n    let privateKey, publicKey;\n    if (keyObjectSupported) {\n      ({\n        privateKey,\n        publicKey\n      } = await generateKeyPair('ec', {\n        namedCurve: crv\n      }));\n      return privat ? privateKey : publicKey;\n    }\n    ({\n      privateKey,\n      publicKey\n    } = await generateKeyPair('ec', {\n      namedCurve: crv,\n      publicKeyEncoding: {\n        type: 'spki',\n        format: 'pem'\n      },\n      privateKeyEncoding: {\n        type: 'pkcs8',\n        format: 'pem'\n      }\n    }));\n    if (privat) {\n      return createPrivateKey(privateKey);\n    } else {\n      return createPublicKey(publicKey);\n    }\n  }\n  static generateSync(crv = 'P-256', privat = true) {\n    if (!EC_CURVES.has(crv)) {\n      throw new errors.JOSENotSupported(`unsupported EC key curve: ${crv}`);\n    }\n    let privateKey, publicKey;\n    if (keyObjectSupported) {\n      ({\n        privateKey,\n        publicKey\n      } = generateKeyPairSync('ec', {\n        namedCurve: crv\n      }));\n      return privat ? privateKey : publicKey;\n    }\n    ({\n      privateKey,\n      publicKey\n    } = generateKeyPairSync('ec', {\n      namedCurve: crv,\n      publicKeyEncoding: {\n        type: 'spki',\n        format: 'pem'\n      },\n      privateKeyEncoding: {\n        type: 'pkcs8',\n        format: 'pem'\n      }\n    }));\n    if (privat) {\n      return createPrivateKey(privateKey);\n    } else {\n      return createPublicKey(publicKey);\n    }\n  }\n}\nmodule.exports = ECKey;","map":{"version":3,"names":["generateKeyPairSync","generateKeyPair","async","require","promisify","THUMBPRINT_MATERIAL","JWK_MEMBERS","PUBLIC_MEMBERS","PRIVATE_MEMBERS","KEY_MANAGEMENT_DECRYPT","KEY_MANAGEMENT_ENCRYPT","EC_CURVES","keyObjectSupported","createPublicKey","createPrivateKey","errors","Key","EC_PUBLIC","Set","Object","freeze","EC_PRIVATE","ECKey","constructor","args","defineProperty","value","enumerable","has","crv","JOSENotSupported","kty","x","y","algorithms","public","generate","privat","privateKey","publicKey","namedCurve","publicKeyEncoding","type","format","privateKeyEncoding","generateSync","module","exports"],"sources":["/Users/chamas/Final-Project/final-project/node_modules/jose/lib/jwk/key/ec.js"],"sourcesContent":["const { generateKeyPairSync, generateKeyPair: async } = require('crypto')\nconst { promisify } = require('util')\n\nconst {\n  THUMBPRINT_MATERIAL, JWK_MEMBERS, PUBLIC_MEMBERS,\n  PRIVATE_MEMBERS, KEY_MANAGEMENT_DECRYPT, KEY_MANAGEMENT_ENCRYPT\n} = require('../../help/consts')\nconst { EC_CURVES } = require('../../registry')\nconst { keyObjectSupported } = require('../../help/runtime_support')\nconst { createPublicKey, createPrivateKey } = require('../../help/key_object')\n\nconst errors = require('../../errors')\n\nconst Key = require('./base')\n\nconst generateKeyPair = promisify(async)\n\nconst EC_PUBLIC = new Set(['crv', 'x', 'y'])\nObject.freeze(EC_PUBLIC)\nconst EC_PRIVATE = new Set([...EC_PUBLIC, 'd'])\nObject.freeze(EC_PRIVATE)\n\n// Elliptic Curve Key Type\nclass ECKey extends Key {\n  constructor (...args) {\n    super(...args)\n    this[JWK_MEMBERS]()\n    Object.defineProperty(this, 'kty', { value: 'EC', enumerable: true })\n    if (!EC_CURVES.has(this.crv)) {\n      throw new errors.JOSENotSupported('unsupported EC key curve')\n    }\n  }\n\n  static get [PUBLIC_MEMBERS] () {\n    return EC_PUBLIC\n  }\n\n  static get [PRIVATE_MEMBERS] () {\n    return EC_PRIVATE\n  }\n\n  // https://tc39.github.io/ecma262/#sec-ordinaryownpropertykeys no need for any special\n  // JSON.stringify handling in V8\n  [THUMBPRINT_MATERIAL] () {\n    return { crv: this.crv, kty: 'EC', x: this.x, y: this.y }\n  }\n\n  [KEY_MANAGEMENT_ENCRYPT] () {\n    return this.algorithms('deriveKey')\n  }\n\n  [KEY_MANAGEMENT_DECRYPT] () {\n    if (this.public) {\n      return new Set()\n    }\n    return this.algorithms('deriveKey')\n  }\n\n  static async generate (crv = 'P-256', privat = true) {\n    if (!EC_CURVES.has(crv)) {\n      throw new errors.JOSENotSupported(`unsupported EC key curve: ${crv}`)\n    }\n\n    let privateKey, publicKey\n\n    if (keyObjectSupported) {\n      ({ privateKey, publicKey } = await generateKeyPair('ec', { namedCurve: crv }))\n      return privat ? privateKey : publicKey\n    }\n\n    ({ privateKey, publicKey } = await generateKeyPair('ec', {\n      namedCurve: crv,\n      publicKeyEncoding: { type: 'spki', format: 'pem' },\n      privateKeyEncoding: { type: 'pkcs8', format: 'pem' }\n    }))\n\n    if (privat) {\n      return createPrivateKey(privateKey)\n    } else {\n      return createPublicKey(publicKey)\n    }\n  }\n\n  static generateSync (crv = 'P-256', privat = true) {\n    if (!EC_CURVES.has(crv)) {\n      throw new errors.JOSENotSupported(`unsupported EC key curve: ${crv}`)\n    }\n\n    let privateKey, publicKey\n\n    if (keyObjectSupported) {\n      ({ privateKey, publicKey } = generateKeyPairSync('ec', { namedCurve: crv }))\n      return privat ? privateKey : publicKey\n    }\n\n    ({ privateKey, publicKey } = generateKeyPairSync('ec', {\n      namedCurve: crv,\n      publicKeyEncoding: { type: 'spki', format: 'pem' },\n      privateKeyEncoding: { type: 'pkcs8', format: 'pem' }\n    }))\n\n    if (privat) {\n      return createPrivateKey(privateKey)\n    } else {\n      return createPublicKey(publicKey)\n    }\n  }\n}\n\nmodule.exports = ECKey\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}