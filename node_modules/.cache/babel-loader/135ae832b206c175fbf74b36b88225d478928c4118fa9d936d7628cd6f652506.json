{"ast":null,"code":"const {\n  generateKeyPairSync,\n  generateKeyPair: async\n} = require('crypto');\nconst {\n  promisify\n} = require('util');\nconst {\n  THUMBPRINT_MATERIAL,\n  JWK_MEMBERS,\n  PUBLIC_MEMBERS,\n  PRIVATE_MEMBERS,\n  KEY_MANAGEMENT_DECRYPT,\n  KEY_MANAGEMENT_ENCRYPT\n} = require('../../help/consts');\nconst {\n  OKP_CURVES\n} = require('../../registry');\nconst {\n  edDSASupported\n} = require('../../help/runtime_support');\nconst errors = require('../../errors');\nconst Key = require('./base');\nconst generateKeyPair = promisify(async);\nconst OKP_PUBLIC = new Set(['crv', 'x']);\nObject.freeze(OKP_PUBLIC);\nconst OKP_PRIVATE = new Set([...OKP_PUBLIC, 'd']);\nObject.freeze(OKP_PRIVATE);\n\n// Octet string key pairs Key Type\nclass OKPKey extends Key {\n  constructor(...args) {\n    super(...args);\n    this[JWK_MEMBERS]();\n    Object.defineProperty(this, 'kty', {\n      value: 'OKP',\n      enumerable: true\n    });\n    if (!OKP_CURVES.has(this.crv)) {\n      throw new errors.JOSENotSupported('unsupported OKP key curve');\n    }\n  }\n  static get [PUBLIC_MEMBERS]() {\n    return OKP_PUBLIC;\n  }\n  static get [PRIVATE_MEMBERS]() {\n    return OKP_PRIVATE;\n  }\n\n  // https://tc39.github.io/ecma262/#sec-ordinaryownpropertykeys no need for any special\n  // JSON.stringify handling in V8\n  [THUMBPRINT_MATERIAL]() {\n    return {\n      crv: this.crv,\n      kty: 'OKP',\n      x: this.x\n    };\n  }\n  [KEY_MANAGEMENT_ENCRYPT]() {\n    return this.algorithms('deriveKey');\n  }\n  [KEY_MANAGEMENT_DECRYPT]() {\n    if (this.public) {\n      return new Set();\n    }\n    return this.algorithms('deriveKey');\n  }\n  static async generate(crv = 'Ed25519', privat = true) {\n    if (!edDSASupported) {\n      throw new errors.JOSENotSupported('OKP keys are not supported in your Node.js runtime version');\n    }\n    if (!OKP_CURVES.has(crv)) {\n      throw new errors.JOSENotSupported(`unsupported OKP key curve: ${crv}`);\n    }\n    const {\n      privateKey,\n      publicKey\n    } = await generateKeyPair(crv.toLowerCase());\n    return privat ? privateKey : publicKey;\n  }\n  static generateSync(crv = 'Ed25519', privat = true) {\n    if (!edDSASupported) {\n      throw new errors.JOSENotSupported('OKP keys are not supported in your Node.js runtime version');\n    }\n    if (!OKP_CURVES.has(crv)) {\n      throw new errors.JOSENotSupported(`unsupported OKP key curve: ${crv}`);\n    }\n    const {\n      privateKey,\n      publicKey\n    } = generateKeyPairSync(crv.toLowerCase());\n    return privat ? privateKey : publicKey;\n  }\n}\nmodule.exports = OKPKey;","map":{"version":3,"names":["generateKeyPairSync","generateKeyPair","async","require","promisify","THUMBPRINT_MATERIAL","JWK_MEMBERS","PUBLIC_MEMBERS","PRIVATE_MEMBERS","KEY_MANAGEMENT_DECRYPT","KEY_MANAGEMENT_ENCRYPT","OKP_CURVES","edDSASupported","errors","Key","OKP_PUBLIC","Set","Object","freeze","OKP_PRIVATE","OKPKey","constructor","args","defineProperty","value","enumerable","has","crv","JOSENotSupported","kty","x","algorithms","public","generate","privat","privateKey","publicKey","toLowerCase","generateSync","module","exports"],"sources":["/Users/chamas/Final-Project/final-project/node_modules/jose/lib/jwk/key/okp.js"],"sourcesContent":["const { generateKeyPairSync, generateKeyPair: async } = require('crypto')\nconst { promisify } = require('util')\n\nconst {\n  THUMBPRINT_MATERIAL, JWK_MEMBERS, PUBLIC_MEMBERS,\n  PRIVATE_MEMBERS, KEY_MANAGEMENT_DECRYPT, KEY_MANAGEMENT_ENCRYPT\n} = require('../../help/consts')\nconst { OKP_CURVES } = require('../../registry')\nconst { edDSASupported } = require('../../help/runtime_support')\nconst errors = require('../../errors')\n\nconst Key = require('./base')\n\nconst generateKeyPair = promisify(async)\n\nconst OKP_PUBLIC = new Set(['crv', 'x'])\nObject.freeze(OKP_PUBLIC)\nconst OKP_PRIVATE = new Set([...OKP_PUBLIC, 'd'])\nObject.freeze(OKP_PRIVATE)\n\n// Octet string key pairs Key Type\nclass OKPKey extends Key {\n  constructor (...args) {\n    super(...args)\n    this[JWK_MEMBERS]()\n    Object.defineProperty(this, 'kty', { value: 'OKP', enumerable: true })\n    if (!OKP_CURVES.has(this.crv)) {\n      throw new errors.JOSENotSupported('unsupported OKP key curve')\n    }\n  }\n\n  static get [PUBLIC_MEMBERS] () {\n    return OKP_PUBLIC\n  }\n\n  static get [PRIVATE_MEMBERS] () {\n    return OKP_PRIVATE\n  }\n\n  // https://tc39.github.io/ecma262/#sec-ordinaryownpropertykeys no need for any special\n  // JSON.stringify handling in V8\n  [THUMBPRINT_MATERIAL] () {\n    return { crv: this.crv, kty: 'OKP', x: this.x }\n  }\n\n  [KEY_MANAGEMENT_ENCRYPT] () {\n    return this.algorithms('deriveKey')\n  }\n\n  [KEY_MANAGEMENT_DECRYPT] () {\n    if (this.public) {\n      return new Set()\n    }\n    return this.algorithms('deriveKey')\n  }\n\n  static async generate (crv = 'Ed25519', privat = true) {\n    if (!edDSASupported) {\n      throw new errors.JOSENotSupported('OKP keys are not supported in your Node.js runtime version')\n    }\n\n    if (!OKP_CURVES.has(crv)) {\n      throw new errors.JOSENotSupported(`unsupported OKP key curve: ${crv}`)\n    }\n\n    const { privateKey, publicKey } = await generateKeyPair(crv.toLowerCase())\n\n    return privat ? privateKey : publicKey\n  }\n\n  static generateSync (crv = 'Ed25519', privat = true) {\n    if (!edDSASupported) {\n      throw new errors.JOSENotSupported('OKP keys are not supported in your Node.js runtime version')\n    }\n\n    if (!OKP_CURVES.has(crv)) {\n      throw new errors.JOSENotSupported(`unsupported OKP key curve: ${crv}`)\n    }\n\n    const { privateKey, publicKey } = generateKeyPairSync(crv.toLowerCase())\n\n    return privat ? privateKey : publicKey\n  }\n}\n\nmodule.exports = OKPKey\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}