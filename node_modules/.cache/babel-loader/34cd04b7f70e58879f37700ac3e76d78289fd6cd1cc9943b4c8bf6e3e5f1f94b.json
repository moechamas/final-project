{"ast":null,"code":"const isObject = require('../help/is_object');\nlet validateCrit = require('../help/validate_crit');\nconst {\n  JWSInvalid\n} = require('../errors');\nvalidateCrit = validateCrit.bind(undefined, JWSInvalid);\nconst compactSerializer = (payload, [recipient]) => {\n  return `${recipient.protected}.${payload}.${recipient.signature}`;\n};\ncompactSerializer.validate = (jws, {\n  0: {\n    unprotectedHeader,\n    protectedHeader\n  },\n  length\n}) => {\n  if (length !== 1 || unprotectedHeader) {\n    throw new JWSInvalid('JWS Compact Serialization doesn\\'t support multiple recipients or JWS unprotected headers');\n  }\n  validateCrit(protectedHeader, unprotectedHeader, protectedHeader ? protectedHeader.crit : undefined);\n};\nconst flattenedSerializer = (payload, [recipient]) => {\n  const {\n    header,\n    signature,\n    protected: prot\n  } = recipient;\n  return {\n    payload,\n    ...(prot ? {\n      protected: prot\n    } : undefined),\n    ...(header ? {\n      header\n    } : undefined),\n    signature\n  };\n};\nflattenedSerializer.validate = (jws, {\n  0: {\n    unprotectedHeader,\n    protectedHeader\n  },\n  length\n}) => {\n  if (length !== 1) {\n    throw new JWSInvalid('Flattened JWS JSON Serialization doesn\\'t support multiple recipients');\n  }\n  validateCrit(protectedHeader, unprotectedHeader, protectedHeader ? protectedHeader.crit : undefined);\n};\nconst generalSerializer = (payload, recipients) => {\n  return {\n    payload,\n    signatures: recipients.map(({\n      header,\n      signature,\n      protected: prot\n    }) => {\n      return {\n        ...(prot ? {\n          protected: prot\n        } : undefined),\n        ...(header ? {\n          header\n        } : undefined),\n        signature\n      };\n    })\n  };\n};\ngeneralSerializer.validate = (jws, recipients) => {\n  let validateB64 = false;\n  recipients.forEach(({\n    protectedHeader,\n    unprotectedHeader\n  }) => {\n    if (protectedHeader && !validateB64 && 'b64' in protectedHeader) {\n      validateB64 = true;\n    }\n    validateCrit(protectedHeader, unprotectedHeader, protectedHeader ? protectedHeader.crit : undefined);\n  });\n  if (validateB64) {\n    const values = recipients.map(({\n      protectedHeader\n    }) => protectedHeader && protectedHeader.b64);\n    if (!values.every((actual, i, [expected]) => actual === expected)) {\n      throw new JWSInvalid('the \"b64\" Header Parameter value MUST be the same for all recipients');\n    }\n  }\n};\nconst isJSON = input => {\n  return isObject(input) && (typeof input.payload === 'string' || Buffer.isBuffer(input.payload));\n};\nconst isValidRecipient = recipient => {\n  return isObject(recipient) && typeof recipient.signature === 'string' && (recipient.header === undefined || isObject(recipient.header)) && (recipient.protected === undefined || typeof recipient.protected === 'string');\n};\nconst isMultiRecipient = input => {\n  if (Array.isArray(input.signatures) && input.signatures.every(isValidRecipient)) {\n    return true;\n  }\n  return false;\n};\nconst detect = input => {\n  if (typeof input === 'string' && input.split('.').length === 3) {\n    return 'compact';\n  }\n  if (isJSON(input)) {\n    if (isMultiRecipient(input)) {\n      return 'general';\n    }\n    if (isValidRecipient(input)) {\n      return 'flattened';\n    }\n  }\n  throw new JWSInvalid('JWS malformed or invalid serialization');\n};\nmodule.exports = {\n  compact: compactSerializer,\n  flattened: flattenedSerializer,\n  general: generalSerializer,\n  detect\n};","map":{"version":3,"names":["isObject","require","validateCrit","JWSInvalid","bind","undefined","compactSerializer","payload","recipient","protected","signature","validate","jws","unprotectedHeader","protectedHeader","length","crit","flattenedSerializer","header","prot","generalSerializer","recipients","signatures","map","validateB64","forEach","values","b64","every","actual","i","expected","isJSON","input","Buffer","isBuffer","isValidRecipient","isMultiRecipient","Array","isArray","detect","split","module","exports","compact","flattened","general"],"sources":["/Users/chamas/Final-Project/final-project/node_modules/jose/lib/jws/serializers.js"],"sourcesContent":["const isObject = require('../help/is_object')\nlet validateCrit = require('../help/validate_crit')\nconst { JWSInvalid } = require('../errors')\n\nvalidateCrit = validateCrit.bind(undefined, JWSInvalid)\n\nconst compactSerializer = (payload, [recipient]) => {\n  return `${recipient.protected}.${payload}.${recipient.signature}`\n}\ncompactSerializer.validate = (jws, { 0: { unprotectedHeader, protectedHeader }, length }) => {\n  if (length !== 1 || unprotectedHeader) {\n    throw new JWSInvalid('JWS Compact Serialization doesn\\'t support multiple recipients or JWS unprotected headers')\n  }\n  validateCrit(protectedHeader, unprotectedHeader, protectedHeader ? protectedHeader.crit : undefined)\n}\n\nconst flattenedSerializer = (payload, [recipient]) => {\n  const { header, signature, protected: prot } = recipient\n\n  return {\n    payload,\n    ...prot ? { protected: prot } : undefined,\n    ...header ? { header } : undefined,\n    signature\n  }\n}\nflattenedSerializer.validate = (jws, { 0: { unprotectedHeader, protectedHeader }, length }) => {\n  if (length !== 1) {\n    throw new JWSInvalid('Flattened JWS JSON Serialization doesn\\'t support multiple recipients')\n  }\n  validateCrit(protectedHeader, unprotectedHeader, protectedHeader ? protectedHeader.crit : undefined)\n}\n\nconst generalSerializer = (payload, recipients) => {\n  return {\n    payload,\n    signatures: recipients.map(({ header, signature, protected: prot }) => {\n      return {\n        ...prot ? { protected: prot } : undefined,\n        ...header ? { header } : undefined,\n        signature\n      }\n    })\n  }\n}\ngeneralSerializer.validate = (jws, recipients) => {\n  let validateB64 = false\n  recipients.forEach(({ protectedHeader, unprotectedHeader }) => {\n    if (protectedHeader && !validateB64 && 'b64' in protectedHeader) {\n      validateB64 = true\n    }\n    validateCrit(protectedHeader, unprotectedHeader, protectedHeader ? protectedHeader.crit : undefined)\n  })\n\n  if (validateB64) {\n    const values = recipients.map(({ protectedHeader }) => protectedHeader && protectedHeader.b64)\n    if (!values.every((actual, i, [expected]) => actual === expected)) {\n      throw new JWSInvalid('the \"b64\" Header Parameter value MUST be the same for all recipients')\n    }\n  }\n}\n\nconst isJSON = (input) => {\n  return isObject(input) && (typeof input.payload === 'string' || Buffer.isBuffer(input.payload))\n}\n\nconst isValidRecipient = (recipient) => {\n  return isObject(recipient) && typeof recipient.signature === 'string' &&\n    (recipient.header === undefined || isObject(recipient.header)) &&\n    (recipient.protected === undefined || typeof recipient.protected === 'string')\n}\n\nconst isMultiRecipient = (input) => {\n  if (Array.isArray(input.signatures) && input.signatures.every(isValidRecipient)) {\n    return true\n  }\n\n  return false\n}\n\nconst detect = (input) => {\n  if (typeof input === 'string' && input.split('.').length === 3) {\n    return 'compact'\n  }\n\n  if (isJSON(input)) {\n    if (isMultiRecipient(input)) {\n      return 'general'\n    }\n\n    if (isValidRecipient(input)) {\n      return 'flattened'\n    }\n  }\n\n  throw new JWSInvalid('JWS malformed or invalid serialization')\n}\n\nmodule.exports = {\n  compact: compactSerializer,\n  flattened: flattenedSerializer,\n  general: generalSerializer,\n  detect\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}