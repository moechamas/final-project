{"ast":null,"code":"/* eslint-disable camelcase */\nconst {\n  inspect\n} = require('util');\nconst {\n  RPError,\n  OPError\n} = require('./errors');\nconst instance = require('./helpers/weak_cache');\nconst now = require('./helpers/unix_timestamp');\nconst {\n  authenticatedPost\n} = require('./helpers/client');\nconst processResponse = require('./helpers/process_response');\nconst TokenSet = require('./token_set');\nclass DeviceFlowHandle {\n  constructor({\n    client,\n    exchangeBody,\n    clientAssertionPayload,\n    response,\n    maxAge,\n    DPoP\n  }) {\n    ['verification_uri', 'user_code', 'device_code'].forEach(prop => {\n      if (typeof response[prop] !== 'string' || !response[prop]) {\n        throw new RPError(`expected ${prop} string to be returned by Device Authorization Response, got %j`, response[prop]);\n      }\n    });\n    if (!Number.isSafeInteger(response.expires_in)) {\n      throw new RPError('expected expires_in number to be returned by Device Authorization Response, got %j', response.expires_in);\n    }\n    instance(this).expires_at = now() + response.expires_in;\n    instance(this).client = client;\n    instance(this).DPoP = DPoP;\n    instance(this).maxAge = maxAge;\n    instance(this).exchangeBody = exchangeBody;\n    instance(this).clientAssertionPayload = clientAssertionPayload;\n    instance(this).response = response;\n    instance(this).interval = response.interval * 1000 || 5000;\n  }\n  abort() {\n    instance(this).aborted = true;\n  }\n  async poll({\n    signal\n  } = {}) {\n    if (signal && signal.aborted || instance(this).aborted) {\n      throw new RPError('polling aborted');\n    }\n    if (this.expired()) {\n      throw new RPError('the device code %j has expired and the device authorization session has concluded', this.device_code);\n    }\n    await new Promise(resolve => setTimeout(resolve, instance(this).interval));\n    const response = await authenticatedPost.call(instance(this).client, 'token', {\n      form: {\n        ...instance(this).exchangeBody,\n        grant_type: 'urn:ietf:params:oauth:grant-type:device_code',\n        device_code: this.device_code\n      },\n      responseType: 'json'\n    }, {\n      clientAssertionPayload: instance(this).clientAssertionPayload,\n      DPoP: instance(this).DPoP\n    });\n    let responseBody;\n    try {\n      responseBody = processResponse(response);\n    } catch (err) {\n      switch (err instanceof OPError && err.error) {\n        case 'slow_down':\n          instance(this).interval += 5000;\n        case 'authorization_pending':\n          // eslint-disable-line no-fallthrough\n          return this.poll({\n            signal\n          });\n        default:\n          throw err;\n      }\n    }\n    const tokenset = new TokenSet(responseBody);\n    if ('id_token' in tokenset) {\n      await instance(this).client.decryptIdToken(tokenset);\n      await instance(this).client.validateIdToken(tokenset, undefined, 'token', instance(this).maxAge);\n    }\n    return tokenset;\n  }\n  get device_code() {\n    return instance(this).response.device_code;\n  }\n  get user_code() {\n    return instance(this).response.user_code;\n  }\n  get verification_uri() {\n    return instance(this).response.verification_uri;\n  }\n  get verification_uri_complete() {\n    return instance(this).response.verification_uri_complete;\n  }\n  get expires_in() {\n    return Math.max.apply(null, [instance(this).expires_at - now(), 0]);\n  }\n  expired() {\n    return this.expires_in === 0;\n  }\n\n  /* istanbul ignore next */\n  [inspect.custom]() {\n    return `${this.constructor.name} ${inspect(instance(this).response, {\n      depth: Infinity,\n      colors: process.stdout.isTTY,\n      compact: false,\n      sorted: true\n    })}`;\n  }\n}\nmodule.exports = DeviceFlowHandle;","map":{"version":3,"names":["inspect","require","RPError","OPError","instance","now","authenticatedPost","processResponse","TokenSet","DeviceFlowHandle","constructor","client","exchangeBody","clientAssertionPayload","response","maxAge","DPoP","forEach","prop","Number","isSafeInteger","expires_in","expires_at","interval","abort","aborted","poll","signal","expired","device_code","Promise","resolve","setTimeout","call","form","grant_type","responseType","responseBody","err","error","tokenset","decryptIdToken","validateIdToken","undefined","user_code","verification_uri","verification_uri_complete","Math","max","apply","custom","name","depth","Infinity","colors","process","stdout","isTTY","compact","sorted","module","exports"],"sources":["/Users/chamas/Final-Project/final-project/node_modules/openid-client/lib/device_flow_handle.js"],"sourcesContent":["/* eslint-disable camelcase */\nconst { inspect } = require('util');\n\nconst { RPError, OPError } = require('./errors');\nconst instance = require('./helpers/weak_cache');\nconst now = require('./helpers/unix_timestamp');\nconst { authenticatedPost } = require('./helpers/client');\nconst processResponse = require('./helpers/process_response');\nconst TokenSet = require('./token_set');\n\nclass DeviceFlowHandle {\n  constructor({\n    client, exchangeBody, clientAssertionPayload, response, maxAge, DPoP,\n  }) {\n    ['verification_uri', 'user_code', 'device_code'].forEach((prop) => {\n      if (typeof response[prop] !== 'string' || !response[prop]) {\n        throw new RPError(`expected ${prop} string to be returned by Device Authorization Response, got %j`, response[prop]);\n      }\n    });\n\n    if (!Number.isSafeInteger(response.expires_in)) {\n      throw new RPError('expected expires_in number to be returned by Device Authorization Response, got %j', response.expires_in);\n    }\n\n    instance(this).expires_at = now() + response.expires_in;\n    instance(this).client = client;\n    instance(this).DPoP = DPoP;\n    instance(this).maxAge = maxAge;\n    instance(this).exchangeBody = exchangeBody;\n    instance(this).clientAssertionPayload = clientAssertionPayload;\n    instance(this).response = response;\n    instance(this).interval = response.interval * 1000 || 5000;\n  }\n\n  abort() {\n    instance(this).aborted = true;\n  }\n\n  async poll({ signal } = {}) {\n    if ((signal && signal.aborted) || instance(this).aborted) {\n      throw new RPError('polling aborted');\n    }\n\n    if (this.expired()) {\n      throw new RPError('the device code %j has expired and the device authorization session has concluded', this.device_code);\n    }\n\n    await new Promise((resolve) => setTimeout(resolve, instance(this).interval));\n\n    const response = await authenticatedPost.call(\n      instance(this).client,\n      'token',\n      {\n        form: {\n          ...instance(this).exchangeBody,\n          grant_type: 'urn:ietf:params:oauth:grant-type:device_code',\n          device_code: this.device_code,\n        },\n        responseType: 'json',\n      },\n      { clientAssertionPayload: instance(this).clientAssertionPayload, DPoP: instance(this).DPoP },\n    );\n\n    let responseBody;\n    try {\n      responseBody = processResponse(response);\n    } catch (err) {\n      switch (err instanceof OPError && err.error) {\n        case 'slow_down':\n          instance(this).interval += 5000;\n        case 'authorization_pending': // eslint-disable-line no-fallthrough\n          return this.poll({ signal });\n        default:\n          throw err;\n      }\n    }\n\n    const tokenset = new TokenSet(responseBody);\n\n    if ('id_token' in tokenset) {\n      await instance(this).client.decryptIdToken(tokenset);\n      await instance(this).client.validateIdToken(tokenset, undefined, 'token', instance(this).maxAge);\n    }\n\n    return tokenset;\n  }\n\n  get device_code() {\n    return instance(this).response.device_code;\n  }\n\n  get user_code() {\n    return instance(this).response.user_code;\n  }\n\n  get verification_uri() {\n    return instance(this).response.verification_uri;\n  }\n\n  get verification_uri_complete() {\n    return instance(this).response.verification_uri_complete;\n  }\n\n  get expires_in() {\n    return Math.max.apply(null, [instance(this).expires_at - now(), 0]);\n  }\n\n  expired() {\n    return this.expires_in === 0;\n  }\n\n  /* istanbul ignore next */\n  [inspect.custom]() {\n    return `${this.constructor.name} ${inspect(instance(this).response, {\n      depth: Infinity,\n      colors: process.stdout.isTTY,\n      compact: false,\n      sorted: true,\n    })}`;\n  }\n}\n\nmodule.exports = DeviceFlowHandle;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}