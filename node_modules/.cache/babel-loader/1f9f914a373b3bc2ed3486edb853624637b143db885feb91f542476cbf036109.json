{"ast":null,"code":"const {\n  Issuer,\n  custom\n} = require('openid-client');\nconst url = require('url');\nconst urlJoin = require('url-join');\nconst pkg = require('../package.json');\nconst debug = require('./debug')('client');\nconst {\n  JWK\n} = require('jose');\nconst telemetryHeader = {\n  name: 'express-oidc',\n  version: pkg.version,\n  env: {\n    node: process.version\n  }\n};\nfunction sortSpaceDelimitedString(string) {\n  return string.split(' ').sort().join(' ');\n}\nasync function get(config) {\n  const defaultHttpOptions = options => {\n    options.headers = {\n      ...options.headers,\n      'User-Agent': config.httpUserAgent || `${pkg.name}/${pkg.version}`,\n      ...(config.enableTelemetry ? {\n        'Auth0-Client': Buffer.from(JSON.stringify(telemetryHeader)).toString('base64')\n      } : undefined)\n    };\n    options.timeout = config.httpTimeout;\n    options.agent = config.httpAgent;\n    return options;\n  };\n  const applyHttpOptionsCustom = entity => entity[custom.http_options] = defaultHttpOptions;\n  applyHttpOptionsCustom(Issuer);\n  const issuer = await Issuer.discover(config.issuerBaseURL);\n  applyHttpOptionsCustom(issuer);\n  const issuerTokenAlgs = Array.isArray(issuer.id_token_signing_alg_values_supported) ? issuer.id_token_signing_alg_values_supported : [];\n  if (!issuerTokenAlgs.includes(config.idTokenSigningAlg)) {\n    debug('ID token algorithm %o is not supported by the issuer. Supported ID token algorithms are: %o.', config.idTokenSigningAlg, issuerTokenAlgs);\n  }\n  const configRespType = sortSpaceDelimitedString(config.authorizationParams.response_type);\n  const issuerRespTypes = Array.isArray(issuer.response_types_supported) ? issuer.response_types_supported : [];\n  issuerRespTypes.map(sortSpaceDelimitedString);\n  if (!issuerRespTypes.includes(configRespType)) {\n    debug('Response type %o is not supported by the issuer. ' + 'Supported response types are: %o.', configRespType, issuerRespTypes);\n  }\n  const configRespMode = config.authorizationParams.response_mode;\n  const issuerRespModes = Array.isArray(issuer.response_modes_supported) ? issuer.response_modes_supported : [];\n  if (configRespMode && !issuerRespModes.includes(configRespMode)) {\n    debug('Response mode %o is not supported by the issuer. ' + 'Supported response modes are %o.', configRespMode, issuerRespModes);\n  }\n  if (config.pushedAuthorizationRequests && !issuer.pushed_authorization_request_endpoint) {\n    throw new TypeError('pushed_authorization_request_endpoint must be configured on the issuer to use pushedAuthorizationRequests');\n  }\n  let jwks;\n  if (config.clientAssertionSigningKey) {\n    const jwk = JWK.asKey(config.clientAssertionSigningKey).toJWK(true);\n    jwks = {\n      keys: [jwk]\n    };\n  }\n  const client = new issuer.Client({\n    client_id: config.clientID,\n    client_secret: config.clientSecret,\n    id_token_signed_response_alg: config.idTokenSigningAlg,\n    token_endpoint_auth_method: config.clientAuthMethod,\n    ...(config.clientAssertionSigningAlg && {\n      token_endpoint_auth_signing_alg: config.clientAssertionSigningAlg\n    })\n  }, jwks);\n  applyHttpOptionsCustom(client);\n  client[custom.clock_tolerance] = config.clockTolerance;\n  if (config.idpLogout) {\n    if (config.auth0Logout || url.parse(issuer.issuer).hostname.match('\\\\.auth0\\\\.com$') && config.auth0Logout !== false) {\n      Object.defineProperty(client, 'endSessionUrl', {\n        value(params) {\n          const {\n            id_token_hint,\n            post_logout_redirect_uri,\n            ...extraParams\n          } = params;\n          const parsedUrl = url.parse(urlJoin(issuer.issuer, '/v2/logout'));\n          parsedUrl.query = {\n            ...extraParams,\n            returnTo: post_logout_redirect_uri,\n            client_id: client.client_id\n          };\n          Object.entries(parsedUrl.query).forEach(([key, value]) => {\n            if (value === null || value === undefined) {\n              delete parsedUrl.query[key];\n            }\n          });\n          return url.format(parsedUrl);\n        }\n      });\n    } else if (!issuer.end_session_endpoint) {\n      debug('the issuer does not support RP-Initiated Logout');\n    }\n  }\n  return {\n    client,\n    issuer\n  };\n}\nconst cache = new Map();\nlet timestamp = 0;\nexports.get = config => {\n  const {\n    discoveryCacheMaxAge: cacheMaxAge\n  } = config;\n  const now = Date.now();\n  if (cache.has(config) && now < timestamp + cacheMaxAge) {\n    return cache.get(config);\n  }\n  timestamp = now;\n  const promise = get(config).catch(e => {\n    cache.delete(config);\n    throw e;\n  });\n  cache.set(config, promise);\n  return promise;\n};","map":{"version":3,"names":["Issuer","custom","require","url","urlJoin","pkg","debug","JWK","telemetryHeader","name","version","env","node","process","sortSpaceDelimitedString","string","split","sort","join","get","config","defaultHttpOptions","options","headers","httpUserAgent","enableTelemetry","Buffer","from","JSON","stringify","toString","undefined","timeout","httpTimeout","agent","httpAgent","applyHttpOptionsCustom","entity","http_options","issuer","discover","issuerBaseURL","issuerTokenAlgs","Array","isArray","id_token_signing_alg_values_supported","includes","idTokenSigningAlg","configRespType","authorizationParams","response_type","issuerRespTypes","response_types_supported","map","configRespMode","response_mode","issuerRespModes","response_modes_supported","pushedAuthorizationRequests","pushed_authorization_request_endpoint","TypeError","jwks","clientAssertionSigningKey","jwk","asKey","toJWK","keys","client","Client","client_id","clientID","client_secret","clientSecret","id_token_signed_response_alg","token_endpoint_auth_method","clientAuthMethod","clientAssertionSigningAlg","token_endpoint_auth_signing_alg","clock_tolerance","clockTolerance","idpLogout","auth0Logout","parse","hostname","match","Object","defineProperty","value","params","id_token_hint","post_logout_redirect_uri","extraParams","parsedUrl","query","returnTo","entries","forEach","key","format","end_session_endpoint","cache","Map","timestamp","exports","discoveryCacheMaxAge","cacheMaxAge","now","Date","has","promise","catch","e","delete","set"],"sources":["/Users/chamas/Final-Project/final-project/node_modules/express-openid-connect/lib/client.js"],"sourcesContent":["const { Issuer, custom } = require('openid-client');\nconst url = require('url');\nconst urlJoin = require('url-join');\nconst pkg = require('../package.json');\nconst debug = require('./debug')('client');\nconst { JWK } = require('jose');\n\nconst telemetryHeader = {\n  name: 'express-oidc',\n  version: pkg.version,\n  env: {\n    node: process.version,\n  },\n};\n\nfunction sortSpaceDelimitedString(string) {\n  return string.split(' ').sort().join(' ');\n}\n\nasync function get(config) {\n  const defaultHttpOptions = (options) => {\n    options.headers = {\n      ...options.headers,\n      'User-Agent': config.httpUserAgent || `${pkg.name}/${pkg.version}`,\n      ...(config.enableTelemetry\n        ? {\n            'Auth0-Client': Buffer.from(\n              JSON.stringify(telemetryHeader)\n            ).toString('base64'),\n          }\n        : undefined),\n    };\n    options.timeout = config.httpTimeout;\n    options.agent = config.httpAgent;\n    return options;\n  };\n\n  const applyHttpOptionsCustom = (entity) =>\n    (entity[custom.http_options] = defaultHttpOptions);\n\n  applyHttpOptionsCustom(Issuer);\n  const issuer = await Issuer.discover(config.issuerBaseURL);\n  applyHttpOptionsCustom(issuer);\n\n  const issuerTokenAlgs = Array.isArray(\n    issuer.id_token_signing_alg_values_supported\n  )\n    ? issuer.id_token_signing_alg_values_supported\n    : [];\n  if (!issuerTokenAlgs.includes(config.idTokenSigningAlg)) {\n    debug(\n      'ID token algorithm %o is not supported by the issuer. Supported ID token algorithms are: %o.',\n      config.idTokenSigningAlg,\n      issuerTokenAlgs\n    );\n  }\n\n  const configRespType = sortSpaceDelimitedString(\n    config.authorizationParams.response_type\n  );\n  const issuerRespTypes = Array.isArray(issuer.response_types_supported)\n    ? issuer.response_types_supported\n    : [];\n  issuerRespTypes.map(sortSpaceDelimitedString);\n  if (!issuerRespTypes.includes(configRespType)) {\n    debug(\n      'Response type %o is not supported by the issuer. ' +\n        'Supported response types are: %o.',\n      configRespType,\n      issuerRespTypes\n    );\n  }\n\n  const configRespMode = config.authorizationParams.response_mode;\n  const issuerRespModes = Array.isArray(issuer.response_modes_supported)\n    ? issuer.response_modes_supported\n    : [];\n  if (configRespMode && !issuerRespModes.includes(configRespMode)) {\n    debug(\n      'Response mode %o is not supported by the issuer. ' +\n        'Supported response modes are %o.',\n      configRespMode,\n      issuerRespModes\n    );\n  }\n\n  if (\n    config.pushedAuthorizationRequests &&\n    !issuer.pushed_authorization_request_endpoint\n  ) {\n    throw new TypeError(\n      'pushed_authorization_request_endpoint must be configured on the issuer to use pushedAuthorizationRequests'\n    );\n  }\n\n  let jwks;\n  if (config.clientAssertionSigningKey) {\n    const jwk = JWK.asKey(config.clientAssertionSigningKey).toJWK(true);\n    jwks = { keys: [jwk] };\n  }\n\n  const client = new issuer.Client(\n    {\n      client_id: config.clientID,\n      client_secret: config.clientSecret,\n      id_token_signed_response_alg: config.idTokenSigningAlg,\n      token_endpoint_auth_method: config.clientAuthMethod,\n      ...(config.clientAssertionSigningAlg && {\n        token_endpoint_auth_signing_alg: config.clientAssertionSigningAlg,\n      }),\n    },\n    jwks\n  );\n  applyHttpOptionsCustom(client);\n  client[custom.clock_tolerance] = config.clockTolerance;\n\n  if (config.idpLogout) {\n    if (\n      config.auth0Logout ||\n      (url.parse(issuer.issuer).hostname.match('\\\\.auth0\\\\.com$') &&\n        config.auth0Logout !== false)\n    ) {\n      Object.defineProperty(client, 'endSessionUrl', {\n        value(params) {\n          const { id_token_hint, post_logout_redirect_uri, ...extraParams } =\n            params;\n          const parsedUrl = url.parse(urlJoin(issuer.issuer, '/v2/logout'));\n          parsedUrl.query = {\n            ...extraParams,\n            returnTo: post_logout_redirect_uri,\n            client_id: client.client_id,\n          };\n\n          Object.entries(parsedUrl.query).forEach(([key, value]) => {\n            if (value === null || value === undefined) {\n              delete parsedUrl.query[key];\n            }\n          });\n\n          return url.format(parsedUrl);\n        },\n      });\n    } else if (!issuer.end_session_endpoint) {\n      debug('the issuer does not support RP-Initiated Logout');\n    }\n  }\n\n  return { client, issuer };\n}\n\nconst cache = new Map();\nlet timestamp = 0;\n\nexports.get = (config) => {\n  const { discoveryCacheMaxAge: cacheMaxAge } = config;\n  const now = Date.now();\n  if (cache.has(config) && now < timestamp + cacheMaxAge) {\n    return cache.get(config);\n  }\n  timestamp = now;\n  const promise = get(config).catch((e) => {\n    cache.delete(config);\n    throw e;\n  });\n  cache.set(config, promise);\n  return promise;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}