{"ast":null,"code":"const {\n  JWTClaimInvalid\n} = require('../errors');\nconst isNotString = val => typeof val !== 'string' || val.length === 0;\nconst isNotArrayOfStrings = val => !Array.isArray(val) || val.length === 0 || val.some(isNotString);\nconst isRequired = (Err, value, label, claim) => {\n  if (value === undefined) {\n    throw new Err(`${label} is missing`, claim, 'missing');\n  }\n};\nconst isString = (Err, value, label, claim, required = false) => {\n  if (required) {\n    isRequired(Err, value, label, claim);\n  }\n  if (value !== undefined && isNotString(value)) {\n    throw new Err(`${label} must be a string`, claim, 'invalid');\n  }\n};\nconst isTimestamp = (value, label, required = false) => {\n  if (required && value === undefined) {\n    throw new JWTClaimInvalid(`\"${label}\" claim is missing`, label, 'missing');\n  }\n  if (value !== undefined && typeof value !== 'number') {\n    throw new JWTClaimInvalid(`\"${label}\" claim must be a JSON numeric value`, label, 'invalid');\n  }\n};\nconst isStringOrArrayOfStrings = (value, label, required = false) => {\n  if (required && value === undefined) {\n    throw new JWTClaimInvalid(`\"${label}\" claim is missing`, label, 'missing');\n  }\n  if (value !== undefined && isNotString(value) && isNotArrayOfStrings(value)) {\n    throw new JWTClaimInvalid(`\"${label}\" claim must be a string or array of strings`, label, 'invalid');\n  }\n};\nmodule.exports = {\n  isNotArrayOfStrings,\n  isRequired,\n  isNotString,\n  isString,\n  isTimestamp,\n  isStringOrArrayOfStrings\n};","map":{"version":3,"names":["JWTClaimInvalid","require","isNotString","val","length","isNotArrayOfStrings","Array","isArray","some","isRequired","Err","value","label","claim","undefined","isString","required","isTimestamp","isStringOrArrayOfStrings","module","exports"],"sources":["/Users/chamas/Final-Project/final-project/node_modules/jose/lib/jwt/shared_validations.js"],"sourcesContent":["const { JWTClaimInvalid } = require('../errors')\n\nconst isNotString = val => typeof val !== 'string' || val.length === 0\nconst isNotArrayOfStrings = val => !Array.isArray(val) || val.length === 0 || val.some(isNotString)\nconst isRequired = (Err, value, label, claim) => {\n  if (value === undefined) {\n    throw new Err(`${label} is missing`, claim, 'missing')\n  }\n}\nconst isString = (Err, value, label, claim, required = false) => {\n  if (required) {\n    isRequired(Err, value, label, claim)\n  }\n\n  if (value !== undefined && isNotString(value)) {\n    throw new Err(`${label} must be a string`, claim, 'invalid')\n  }\n}\nconst isTimestamp = (value, label, required = false) => {\n  if (required && value === undefined) {\n    throw new JWTClaimInvalid(`\"${label}\" claim is missing`, label, 'missing')\n  }\n\n  if (value !== undefined && (typeof value !== 'number')) {\n    throw new JWTClaimInvalid(`\"${label}\" claim must be a JSON numeric value`, label, 'invalid')\n  }\n}\nconst isStringOrArrayOfStrings = (value, label, required = false) => {\n  if (required && value === undefined) {\n    throw new JWTClaimInvalid(`\"${label}\" claim is missing`, label, 'missing')\n  }\n\n  if (value !== undefined && (isNotString(value) && isNotArrayOfStrings(value))) {\n    throw new JWTClaimInvalid(`\"${label}\" claim must be a string or array of strings`, label, 'invalid')\n  }\n}\n\nmodule.exports = {\n  isNotArrayOfStrings,\n  isRequired,\n  isNotString,\n  isString,\n  isTimestamp,\n  isStringOrArrayOfStrings\n}\n"],"mappings":"AAAA,MAAM;EAAEA;AAAgB,CAAC,GAAGC,OAAO,CAAC,WAAW,CAAC;AAEhD,MAAMC,WAAW,GAAGC,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,CAACC,MAAM,KAAK,CAAC;AACtE,MAAMC,mBAAmB,GAAGF,GAAG,IAAI,CAACG,KAAK,CAACC,OAAO,CAACJ,GAAG,CAAC,IAAIA,GAAG,CAACC,MAAM,KAAK,CAAC,IAAID,GAAG,CAACK,IAAI,CAACN,WAAW,CAAC;AACnG,MAAMO,UAAU,GAAGA,CAACC,GAAG,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,KAAK;EAC/C,IAAIF,KAAK,KAAKG,SAAS,EAAE;IACvB,MAAM,IAAIJ,GAAG,CAAE,GAAEE,KAAM,aAAY,EAAEC,KAAK,EAAE,SAAS,CAAC;EACxD;AACF,CAAC;AACD,MAAME,QAAQ,GAAGA,CAACL,GAAG,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEG,QAAQ,GAAG,KAAK,KAAK;EAC/D,IAAIA,QAAQ,EAAE;IACZP,UAAU,CAACC,GAAG,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,CAAC;EACtC;EAEA,IAAIF,KAAK,KAAKG,SAAS,IAAIZ,WAAW,CAACS,KAAK,CAAC,EAAE;IAC7C,MAAM,IAAID,GAAG,CAAE,GAAEE,KAAM,mBAAkB,EAAEC,KAAK,EAAE,SAAS,CAAC;EAC9D;AACF,CAAC;AACD,MAAMI,WAAW,GAAGA,CAACN,KAAK,EAAEC,KAAK,EAAEI,QAAQ,GAAG,KAAK,KAAK;EACtD,IAAIA,QAAQ,IAAIL,KAAK,KAAKG,SAAS,EAAE;IACnC,MAAM,IAAId,eAAe,CAAE,IAAGY,KAAM,oBAAmB,EAAEA,KAAK,EAAE,SAAS,CAAC;EAC5E;EAEA,IAAID,KAAK,KAAKG,SAAS,IAAK,OAAOH,KAAK,KAAK,QAAS,EAAE;IACtD,MAAM,IAAIX,eAAe,CAAE,IAAGY,KAAM,sCAAqC,EAAEA,KAAK,EAAE,SAAS,CAAC;EAC9F;AACF,CAAC;AACD,MAAMM,wBAAwB,GAAGA,CAACP,KAAK,EAAEC,KAAK,EAAEI,QAAQ,GAAG,KAAK,KAAK;EACnE,IAAIA,QAAQ,IAAIL,KAAK,KAAKG,SAAS,EAAE;IACnC,MAAM,IAAId,eAAe,CAAE,IAAGY,KAAM,oBAAmB,EAAEA,KAAK,EAAE,SAAS,CAAC;EAC5E;EAEA,IAAID,KAAK,KAAKG,SAAS,IAAKZ,WAAW,CAACS,KAAK,CAAC,IAAIN,mBAAmB,CAACM,KAAK,CAAE,EAAE;IAC7E,MAAM,IAAIX,eAAe,CAAE,IAAGY,KAAM,8CAA6C,EAAEA,KAAK,EAAE,SAAS,CAAC;EACtG;AACF,CAAC;AAEDO,MAAM,CAACC,OAAO,GAAG;EACff,mBAAmB;EACnBI,UAAU;EACVP,WAAW;EACXa,QAAQ;EACRE,WAAW;EACXC;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}