{"ast":null,"code":"const generateIV = require('../help/generate_iv');\nconst base64url = require('../help/base64url');\nmodule.exports = (JWA, JWK) => {\n  ['A128GCMKW', 'A192GCMKW', 'A256GCMKW'].forEach(jwaAlg => {\n    const encAlg = jwaAlg.substr(0, 7);\n    const size = parseInt(jwaAlg.substr(1, 3), 10);\n    const encrypt = JWA.encrypt.get(encAlg);\n    const decrypt = JWA.decrypt.get(encAlg);\n    if (encrypt && decrypt) {\n      JWA.keyManagementEncrypt.set(jwaAlg, (key, payload) => {\n        const iv = generateIV(jwaAlg);\n        const {\n          ciphertext,\n          tag\n        } = encrypt(key, payload, {\n          iv\n        });\n        return {\n          wrapped: ciphertext,\n          header: {\n            tag: base64url.encodeBuffer(tag),\n            iv: base64url.encodeBuffer(iv)\n          }\n        };\n      });\n      JWA.keyManagementDecrypt.set(jwaAlg, decrypt);\n      JWK.oct.wrapKey[jwaAlg] = JWK.oct.unwrapKey[jwaAlg] = key => (key.use === 'enc' || key.use === undefined) && key.length === size;\n    }\n  });\n};","map":{"version":3,"names":["generateIV","require","base64url","module","exports","JWA","JWK","forEach","jwaAlg","encAlg","substr","size","parseInt","encrypt","get","decrypt","keyManagementEncrypt","set","key","payload","iv","ciphertext","tag","wrapped","header","encodeBuffer","keyManagementDecrypt","oct","wrapKey","unwrapKey","use","undefined","length"],"sources":["/Users/chamas/Final-Project/final-project/node_modules/jose/lib/jwa/aes_gcm_kw.js"],"sourcesContent":["const generateIV = require('../help/generate_iv')\nconst base64url = require('../help/base64url')\n\nmodule.exports = (JWA, JWK) => {\n  ['A128GCMKW', 'A192GCMKW', 'A256GCMKW'].forEach((jwaAlg) => {\n    const encAlg = jwaAlg.substr(0, 7)\n    const size = parseInt(jwaAlg.substr(1, 3), 10)\n    const encrypt = JWA.encrypt.get(encAlg)\n    const decrypt = JWA.decrypt.get(encAlg)\n\n    if (encrypt && decrypt) {\n      JWA.keyManagementEncrypt.set(jwaAlg, (key, payload) => {\n        const iv = generateIV(jwaAlg)\n        const { ciphertext, tag } = encrypt(key, payload, { iv })\n        return {\n          wrapped: ciphertext,\n          header: { tag: base64url.encodeBuffer(tag), iv: base64url.encodeBuffer(iv) }\n        }\n      })\n      JWA.keyManagementDecrypt.set(jwaAlg, decrypt)\n      JWK.oct.wrapKey[jwaAlg] = JWK.oct.unwrapKey[jwaAlg] = key => (key.use === 'enc' || key.use === undefined) && key.length === size\n    }\n  })\n}\n"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AACjD,MAAMC,SAAS,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AAE9CE,MAAM,CAACC,OAAO,GAAG,CAACC,GAAG,EAAEC,GAAG,KAAK;EAC7B,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,CAAC,CAACC,OAAO,CAAEC,MAAM,IAAK;IAC1D,MAAMC,MAAM,GAAGD,MAAM,CAACE,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;IAClC,MAAMC,IAAI,GAAGC,QAAQ,CAACJ,MAAM,CAACE,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IAC9C,MAAMG,OAAO,GAAGR,GAAG,CAACQ,OAAO,CAACC,GAAG,CAACL,MAAM,CAAC;IACvC,MAAMM,OAAO,GAAGV,GAAG,CAACU,OAAO,CAACD,GAAG,CAACL,MAAM,CAAC;IAEvC,IAAII,OAAO,IAAIE,OAAO,EAAE;MACtBV,GAAG,CAACW,oBAAoB,CAACC,GAAG,CAACT,MAAM,EAAE,CAACU,GAAG,EAAEC,OAAO,KAAK;QACrD,MAAMC,EAAE,GAAGpB,UAAU,CAACQ,MAAM,CAAC;QAC7B,MAAM;UAAEa,UAAU;UAAEC;QAAI,CAAC,GAAGT,OAAO,CAACK,GAAG,EAAEC,OAAO,EAAE;UAAEC;QAAG,CAAC,CAAC;QACzD,OAAO;UACLG,OAAO,EAAEF,UAAU;UACnBG,MAAM,EAAE;YAAEF,GAAG,EAAEpB,SAAS,CAACuB,YAAY,CAACH,GAAG,CAAC;YAAEF,EAAE,EAAElB,SAAS,CAACuB,YAAY,CAACL,EAAE;UAAE;QAC7E,CAAC;MACH,CAAC,CAAC;MACFf,GAAG,CAACqB,oBAAoB,CAACT,GAAG,CAACT,MAAM,EAAEO,OAAO,CAAC;MAC7CT,GAAG,CAACqB,GAAG,CAACC,OAAO,CAACpB,MAAM,CAAC,GAAGF,GAAG,CAACqB,GAAG,CAACE,SAAS,CAACrB,MAAM,CAAC,GAAGU,GAAG,IAAI,CAACA,GAAG,CAACY,GAAG,KAAK,KAAK,IAAIZ,GAAG,CAACY,GAAG,KAAKC,SAAS,KAAKb,GAAG,CAACc,MAAM,KAAKrB,IAAI;IAClI;EACF,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}