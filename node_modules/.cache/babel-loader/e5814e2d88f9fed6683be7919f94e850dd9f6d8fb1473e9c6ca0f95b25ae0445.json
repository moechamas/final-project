{"ast":null,"code":"const base64url = require('./helpers/base64url');\nconst now = require('./helpers/unix_timestamp');\nclass TokenSet {\n  /**\n   * @name constructor\n   * @api public\n   */\n  constructor(values) {\n    Object.assign(this, values);\n  }\n\n  /**\n   * @name expires_in=\n   * @api public\n   */\n  set expires_in(value) {\n    // eslint-disable-line camelcase\n    this.expires_at = now() + Number(value);\n  }\n\n  /**\n   * @name expires_in\n   * @api public\n   */\n  get expires_in() {\n    // eslint-disable-line camelcase\n    return Math.max.apply(null, [this.expires_at - now(), 0]);\n  }\n\n  /**\n   * @name expired\n   * @api public\n   */\n  expired() {\n    return this.expires_in === 0;\n  }\n\n  /**\n   * @name claims\n   * @api public\n   */\n  claims() {\n    if (!this.id_token) {\n      throw new TypeError('id_token not present in TokenSet');\n    }\n    return JSON.parse(base64url.decode(this.id_token.split('.')[1]));\n  }\n}\nmodule.exports = TokenSet;","map":{"version":3,"names":["base64url","require","now","TokenSet","constructor","values","Object","assign","expires_in","value","expires_at","Number","Math","max","apply","expired","claims","id_token","TypeError","JSON","parse","decode","split","module","exports"],"sources":["/Users/chamas/Final-Project/final-project/node_modules/openid-client/lib/token_set.js"],"sourcesContent":["const base64url = require('./helpers/base64url');\nconst now = require('./helpers/unix_timestamp');\n\nclass TokenSet {\n  /**\n   * @name constructor\n   * @api public\n   */\n  constructor(values) {\n    Object.assign(this, values);\n  }\n\n  /**\n   * @name expires_in=\n   * @api public\n   */\n  set expires_in(value) { // eslint-disable-line camelcase\n    this.expires_at = now() + Number(value);\n  }\n\n  /**\n   * @name expires_in\n   * @api public\n   */\n  get expires_in() { // eslint-disable-line camelcase\n    return Math.max.apply(null, [this.expires_at - now(), 0]);\n  }\n\n  /**\n   * @name expired\n   * @api public\n   */\n  expired() {\n    return this.expires_in === 0;\n  }\n\n  /**\n   * @name claims\n   * @api public\n   */\n  claims() {\n    if (!this.id_token) {\n      throw new TypeError('id_token not present in TokenSet');\n    }\n\n    return JSON.parse(base64url.decode(this.id_token.split('.')[1]));\n  }\n}\n\nmodule.exports = TokenSet;\n"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAChD,MAAMC,GAAG,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AAE/C,MAAME,QAAQ,CAAC;EACb;AACF;AACA;AACA;EACEC,WAAWA,CAACC,MAAM,EAAE;IAClBC,MAAM,CAACC,MAAM,CAAC,IAAI,EAAEF,MAAM,CAAC;EAC7B;;EAEA;AACF;AACA;AACA;EACE,IAAIG,UAAUA,CAACC,KAAK,EAAE;IAAE;IACtB,IAAI,CAACC,UAAU,GAAGR,GAAG,CAAC,CAAC,GAAGS,MAAM,CAACF,KAAK,CAAC;EACzC;;EAEA;AACF;AACA;AACA;EACE,IAAID,UAAUA,CAAA,EAAG;IAAE;IACjB,OAAOI,IAAI,CAACC,GAAG,CAACC,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,CAACJ,UAAU,GAAGR,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC3D;;EAEA;AACF;AACA;AACA;EACEa,OAAOA,CAAA,EAAG;IACR,OAAO,IAAI,CAACP,UAAU,KAAK,CAAC;EAC9B;;EAEA;AACF;AACA;AACA;EACEQ,MAAMA,CAAA,EAAG;IACP,IAAI,CAAC,IAAI,CAACC,QAAQ,EAAE;MAClB,MAAM,IAAIC,SAAS,CAAC,kCAAkC,CAAC;IACzD;IAEA,OAAOC,IAAI,CAACC,KAAK,CAACpB,SAAS,CAACqB,MAAM,CAAC,IAAI,CAACJ,QAAQ,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAClE;AACF;AAEAC,MAAM,CAACC,OAAO,GAAGrB,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}