{"ast":null,"code":"const {\n  inherits\n} = require('util');\nconst DERDecoder = require('./der');\nfunction PEMDecoder(entity) {\n  DERDecoder.call(this, entity);\n  this.enc = 'pem';\n}\ninherits(PEMDecoder, DERDecoder);\nPEMDecoder.prototype.decode = function decode(data, options) {\n  const lines = data.toString().split(/[\\r\\n]+/g);\n  const label = options.label.toUpperCase();\n  const re = /^-----(BEGIN|END) ([^-]+)-----$/;\n  let start = -1;\n  let end = -1;\n  for (let i = 0; i < lines.length; i++) {\n    const match = lines[i].match(re);\n    if (match === null) {\n      continue;\n    }\n    if (match[2] !== label) {\n      continue;\n    }\n    if (start === -1) {\n      if (match[1] !== 'BEGIN') {\n        break;\n      }\n      start = i;\n    } else {\n      if (match[1] !== 'END') {\n        break;\n      }\n      end = i;\n      break;\n    }\n  }\n  if (start === -1 || end === -1) {\n    throw new Error(`PEM section not found for: ${label}`);\n  }\n  const base64 = lines.slice(start + 1, end).join('');\n  // Remove excessive symbols\n  base64.replace(/[^a-z0-9+/=]+/gi, '');\n  const input = Buffer.from(base64, 'base64');\n  return DERDecoder.prototype.decode.call(this, input, options);\n};\nmodule.exports = PEMDecoder;","map":{"version":3,"names":["inherits","require","DERDecoder","PEMDecoder","entity","call","enc","prototype","decode","data","options","lines","toString","split","label","toUpperCase","re","start","end","i","length","match","Error","base64","slice","join","replace","input","Buffer","from","module","exports"],"sources":["/Users/chamas/Final-Project/final-project/node_modules/@panva/asn1.js/lib/asn1/decoders/pem.js"],"sourcesContent":["const { inherits } = require('util')\n\nconst DERDecoder = require('./der')\n\nfunction PEMDecoder (entity) {\n  DERDecoder.call(this, entity)\n  this.enc = 'pem'\n}\ninherits(PEMDecoder, DERDecoder)\n\nPEMDecoder.prototype.decode = function decode (data, options) {\n  const lines = data.toString().split(/[\\r\\n]+/g)\n\n  const label = options.label.toUpperCase()\n\n  const re = /^-----(BEGIN|END) ([^-]+)-----$/\n  let start = -1\n  let end = -1\n  for (let i = 0; i < lines.length; i++) {\n    const match = lines[i].match(re)\n    if (match === null) { continue }\n\n    if (match[2] !== label) { continue }\n\n    if (start === -1) {\n      if (match[1] !== 'BEGIN') { break }\n      start = i\n    } else {\n      if (match[1] !== 'END') { break }\n      end = i\n      break\n    }\n  }\n  if (start === -1 || end === -1) { throw new Error(`PEM section not found for: ${label}`) }\n\n  const base64 = lines.slice(start + 1, end).join('')\n  // Remove excessive symbols\n  base64.replace(/[^a-z0-9+/=]+/gi, '')\n\n  const input = Buffer.from(base64, 'base64')\n  return DERDecoder.prototype.decode.call(this, input, options)\n}\n\nmodule.exports = PEMDecoder\n"],"mappings":"AAAA,MAAM;EAAEA;AAAS,CAAC,GAAGC,OAAO,CAAC,MAAM,CAAC;AAEpC,MAAMC,UAAU,GAAGD,OAAO,CAAC,OAAO,CAAC;AAEnC,SAASE,UAAUA,CAAEC,MAAM,EAAE;EAC3BF,UAAU,CAACG,IAAI,CAAC,IAAI,EAAED,MAAM,CAAC;EAC7B,IAAI,CAACE,GAAG,GAAG,KAAK;AAClB;AACAN,QAAQ,CAACG,UAAU,EAAED,UAAU,CAAC;AAEhCC,UAAU,CAACI,SAAS,CAACC,MAAM,GAAG,SAASA,MAAMA,CAAEC,IAAI,EAAEC,OAAO,EAAE;EAC5D,MAAMC,KAAK,GAAGF,IAAI,CAACG,QAAQ,CAAC,CAAC,CAACC,KAAK,CAAC,UAAU,CAAC;EAE/C,MAAMC,KAAK,GAAGJ,OAAO,CAACI,KAAK,CAACC,WAAW,CAAC,CAAC;EAEzC,MAAMC,EAAE,GAAG,iCAAiC;EAC5C,IAAIC,KAAK,GAAG,CAAC,CAAC;EACd,IAAIC,GAAG,GAAG,CAAC,CAAC;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,KAAK,CAACS,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,MAAME,KAAK,GAAGV,KAAK,CAACQ,CAAC,CAAC,CAACE,KAAK,CAACL,EAAE,CAAC;IAChC,IAAIK,KAAK,KAAK,IAAI,EAAE;MAAE;IAAS;IAE/B,IAAIA,KAAK,CAAC,CAAC,CAAC,KAAKP,KAAK,EAAE;MAAE;IAAS;IAEnC,IAAIG,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAII,KAAK,CAAC,CAAC,CAAC,KAAK,OAAO,EAAE;QAAE;MAAM;MAClCJ,KAAK,GAAGE,CAAC;IACX,CAAC,MAAM;MACL,IAAIE,KAAK,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE;QAAE;MAAM;MAChCH,GAAG,GAAGC,CAAC;MACP;IACF;EACF;EACA,IAAIF,KAAK,KAAK,CAAC,CAAC,IAAIC,GAAG,KAAK,CAAC,CAAC,EAAE;IAAE,MAAM,IAAII,KAAK,CAAE,8BAA6BR,KAAM,EAAC,CAAC;EAAC;EAEzF,MAAMS,MAAM,GAAGZ,KAAK,CAACa,KAAK,CAACP,KAAK,GAAG,CAAC,EAAEC,GAAG,CAAC,CAACO,IAAI,CAAC,EAAE,CAAC;EACnD;EACAF,MAAM,CAACG,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC;EAErC,MAAMC,KAAK,GAAGC,MAAM,CAACC,IAAI,CAACN,MAAM,EAAE,QAAQ,CAAC;EAC3C,OAAOrB,UAAU,CAACK,SAAS,CAACC,MAAM,CAACH,IAAI,CAAC,IAAI,EAAEsB,KAAK,EAAEjB,OAAO,CAAC;AAC/D,CAAC;AAEDoB,MAAM,CAACC,OAAO,GAAG5B,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}