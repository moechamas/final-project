{"ast":null,"code":"const {\n  EOL\n} = require('os');\nconst errors = require('../errors');\nconst {\n  keyObjectSupported\n} = require('./runtime_support');\nconst {\n  createPublicKey\n} = require('./key_object');\nconst base64url = require('./base64url');\nconst asn1 = require('./asn1');\nconst computePrimes = require('./rsa_primes');\nconst {\n  OKP_CURVES,\n  EC_CURVES\n} = require('../registry');\nconst formatPem = (base64pem, descriptor) => `-----BEGIN ${descriptor} KEY-----${EOL}${(base64pem.match(/.{1,64}/g) || []).join(EOL)}${EOL}-----END ${descriptor} KEY-----`;\nconst okpToJWK = {\n  private(crv, keyObject) {\n    const der = keyObject.export({\n      type: 'pkcs8',\n      format: 'der'\n    });\n    const OneAsymmetricKey = asn1.get('OneAsymmetricKey');\n    const {\n      privateKey: {\n        privateKey: d\n      }\n    } = OneAsymmetricKey.decode(der);\n    return {\n      ...okpToJWK.public(crv, createPublicKey(keyObject)),\n      d: base64url.encodeBuffer(d)\n    };\n  },\n  public(crv, keyObject) {\n    const der = keyObject.export({\n      type: 'spki',\n      format: 'der'\n    });\n    const PublicKeyInfo = asn1.get('PublicKeyInfo');\n    const {\n      publicKey: {\n        data: x\n      }\n    } = PublicKeyInfo.decode(der);\n    return {\n      kty: 'OKP',\n      crv,\n      x: base64url.encodeBuffer(x)\n    };\n  }\n};\nconst keyObjectToJWK = {\n  rsa: {\n    private(keyObject) {\n      const der = keyObject.export({\n        type: 'pkcs8',\n        format: 'der'\n      });\n      const PrivateKeyInfo = asn1.get('PrivateKeyInfo');\n      const RSAPrivateKey = asn1.get('RSAPrivateKey');\n      const {\n        privateKey\n      } = PrivateKeyInfo.decode(der);\n      const {\n        version,\n        n,\n        e,\n        d,\n        p,\n        q,\n        dp,\n        dq,\n        qi\n      } = RSAPrivateKey.decode(privateKey);\n      if (version !== 'two-prime') {\n        throw new errors.JOSENotSupported('Private RSA keys with more than two primes are not supported');\n      }\n      return {\n        kty: 'RSA',\n        n: base64url.encodeBigInt(n),\n        e: base64url.encodeBigInt(e),\n        d: base64url.encodeBigInt(d),\n        p: base64url.encodeBigInt(p),\n        q: base64url.encodeBigInt(q),\n        dp: base64url.encodeBigInt(dp),\n        dq: base64url.encodeBigInt(dq),\n        qi: base64url.encodeBigInt(qi)\n      };\n    },\n    public(keyObject) {\n      const der = keyObject.export({\n        type: 'spki',\n        format: 'der'\n      });\n      const PublicKeyInfo = asn1.get('PublicKeyInfo');\n      const RSAPublicKey = asn1.get('RSAPublicKey');\n      const {\n        publicKey: {\n          data: publicKey\n        }\n      } = PublicKeyInfo.decode(der);\n      const {\n        n,\n        e\n      } = RSAPublicKey.decode(publicKey);\n      return {\n        kty: 'RSA',\n        n: base64url.encodeBigInt(n),\n        e: base64url.encodeBigInt(e)\n      };\n    }\n  },\n  ec: {\n    private(keyObject) {\n      const der = keyObject.export({\n        type: 'pkcs8',\n        format: 'der'\n      });\n      const PrivateKeyInfo = asn1.get('PrivateKeyInfo');\n      const ECPrivateKey = asn1.get('ECPrivateKey');\n      const {\n        privateKey,\n        algorithm: {\n          parameters: {\n            value: crv\n          }\n        }\n      } = PrivateKeyInfo.decode(der);\n      const {\n        privateKey: d,\n        publicKey\n      } = ECPrivateKey.decode(privateKey);\n      if (typeof publicKey === 'undefined') {\n        if (keyObjectSupported) {\n          return {\n            ...keyObjectToJWK.ec.public(createPublicKey(keyObject)),\n            d: base64url.encodeBuffer(d)\n          };\n        }\n        throw new errors.JOSENotSupported('Private EC keys without the public key embedded are not supported in your Node.js runtime version');\n      }\n      const x = publicKey.data.slice(1, (publicKey.data.length - 1) / 2 + 1);\n      const y = publicKey.data.slice((publicKey.data.length - 1) / 2 + 1);\n      return {\n        kty: 'EC',\n        crv,\n        d: base64url.encodeBuffer(d),\n        x: base64url.encodeBuffer(x),\n        y: base64url.encodeBuffer(y)\n      };\n    },\n    public(keyObject) {\n      const der = keyObject.export({\n        type: 'spki',\n        format: 'der'\n      });\n      const PublicKeyInfo = asn1.get('PublicKeyInfo');\n      const {\n        publicKey: {\n          data: publicKey\n        },\n        algorithm: {\n          parameters: {\n            value: crv\n          }\n        }\n      } = PublicKeyInfo.decode(der);\n      const x = publicKey.slice(1, (publicKey.length - 1) / 2 + 1);\n      const y = publicKey.slice((publicKey.length - 1) / 2 + 1);\n      return {\n        kty: 'EC',\n        crv,\n        x: base64url.encodeBuffer(x),\n        y: base64url.encodeBuffer(y)\n      };\n    }\n  },\n  ed25519: {\n    private(keyObject) {\n      return okpToJWK.private('Ed25519', keyObject);\n    },\n    public(keyObject) {\n      return okpToJWK.public('Ed25519', keyObject);\n    }\n  },\n  ed448: {\n    private(keyObject) {\n      return okpToJWK.private('Ed448', keyObject);\n    },\n    public(keyObject) {\n      return okpToJWK.public('Ed448', keyObject);\n    }\n  },\n  x25519: {\n    private(keyObject) {\n      return okpToJWK.private('X25519', keyObject);\n    },\n    public(keyObject) {\n      return okpToJWK.public('X25519', keyObject);\n    }\n  },\n  x448: {\n    private(keyObject) {\n      return okpToJWK.private('X448', keyObject);\n    },\n    public(keyObject) {\n      return okpToJWK.public('X448', keyObject);\n    }\n  }\n};\nmodule.exports.keyObjectToJWK = keyObject => {\n  if (keyObject.type === 'private') {\n    return keyObjectToJWK[keyObject.asymmetricKeyType].private(keyObject);\n  }\n  return keyObjectToJWK[keyObject.asymmetricKeyType].public(keyObject);\n};\nconst concatEcPublicKey = (x, y) => ({\n  unused: 0,\n  data: Buffer.concat([Buffer.alloc(1, 4), base64url.decodeToBuffer(x), base64url.decodeToBuffer(y)])\n});\nconst jwkToPem = {\n  RSA: {\n    private(jwk, {\n      calculateMissingRSAPrimes\n    }) {\n      const RSAPrivateKey = asn1.get('RSAPrivateKey');\n      if ('oth' in jwk) {\n        throw new errors.JOSENotSupported('Private RSA keys with more than two primes are not supported');\n      }\n      if (jwk.p || jwk.q || jwk.dp || jwk.dq || jwk.qi) {\n        if (!(jwk.p && jwk.q && jwk.dp && jwk.dq && jwk.qi)) {\n          throw new errors.JWKInvalid('all other private key parameters must be present when any one of them is present');\n        }\n      } else if (calculateMissingRSAPrimes) {\n        jwk = computePrimes(jwk);\n      } else if (!calculateMissingRSAPrimes) {\n        throw new errors.JOSENotSupported('importing private RSA keys without all other private key parameters is not enabled, see documentation and its advisory on how and when its ok to enable it');\n      }\n      return RSAPrivateKey.encode({\n        version: 0,\n        n: BigInt(`0x${base64url.decodeToBuffer(jwk.n).toString('hex')}`),\n        e: BigInt(`0x${base64url.decodeToBuffer(jwk.e).toString('hex')}`),\n        d: BigInt(`0x${base64url.decodeToBuffer(jwk.d).toString('hex')}`),\n        p: BigInt(`0x${base64url.decodeToBuffer(jwk.p).toString('hex')}`),\n        q: BigInt(`0x${base64url.decodeToBuffer(jwk.q).toString('hex')}`),\n        dp: BigInt(`0x${base64url.decodeToBuffer(jwk.dp).toString('hex')}`),\n        dq: BigInt(`0x${base64url.decodeToBuffer(jwk.dq).toString('hex')}`),\n        qi: BigInt(`0x${base64url.decodeToBuffer(jwk.qi).toString('hex')}`)\n      }, 'pem', {\n        label: 'RSA PRIVATE KEY'\n      });\n    },\n    public(jwk) {\n      const RSAPublicKey = asn1.get('RSAPublicKey');\n      return RSAPublicKey.encode({\n        version: 0,\n        n: BigInt(`0x${base64url.decodeToBuffer(jwk.n).toString('hex')}`),\n        e: BigInt(`0x${base64url.decodeToBuffer(jwk.e).toString('hex')}`)\n      }, 'pem', {\n        label: 'RSA PUBLIC KEY'\n      });\n    }\n  },\n  EC: {\n    private(jwk) {\n      const ECPrivateKey = asn1.get('ECPrivateKey');\n      return ECPrivateKey.encode({\n        version: 1,\n        privateKey: base64url.decodeToBuffer(jwk.d),\n        parameters: {\n          type: 'namedCurve',\n          value: jwk.crv\n        },\n        publicKey: concatEcPublicKey(jwk.x, jwk.y)\n      }, 'pem', {\n        label: 'EC PRIVATE KEY'\n      });\n    },\n    public(jwk) {\n      const PublicKeyInfo = asn1.get('PublicKeyInfo');\n      return PublicKeyInfo.encode({\n        algorithm: {\n          algorithm: 'ecPublicKey',\n          parameters: {\n            type: 'namedCurve',\n            value: jwk.crv\n          }\n        },\n        publicKey: concatEcPublicKey(jwk.x, jwk.y)\n      }, 'pem', {\n        label: 'PUBLIC KEY'\n      });\n    }\n  },\n  OKP: {\n    private(jwk) {\n      const OneAsymmetricKey = asn1.get('OneAsymmetricKey');\n      const b64 = OneAsymmetricKey.encode({\n        version: 0,\n        privateKey: {\n          privateKey: base64url.decodeToBuffer(jwk.d)\n        },\n        algorithm: {\n          algorithm: jwk.crv\n        }\n      }, 'der');\n\n      // TODO: WHYYY? https://github.com/indutny/asn1.js/issues/110\n      b64.write('04', 12, 1, 'hex');\n      return formatPem(b64.toString('base64'), 'PRIVATE');\n    },\n    public(jwk) {\n      const PublicKeyInfo = asn1.get('PublicKeyInfo');\n      return PublicKeyInfo.encode({\n        algorithm: {\n          algorithm: jwk.crv\n        },\n        publicKey: {\n          unused: 0,\n          data: base64url.decodeToBuffer(jwk.x)\n        }\n      }, 'pem', {\n        label: 'PUBLIC KEY'\n      });\n    }\n  }\n};\nmodule.exports.jwkToPem = (jwk, {\n  calculateMissingRSAPrimes = false\n} = {}) => {\n  switch (jwk.kty) {\n    case 'EC':\n      if (!EC_CURVES.has(jwk.crv)) {\n        throw new errors.JOSENotSupported(`unsupported EC key curve: ${jwk.crv}`);\n      }\n      break;\n    case 'OKP':\n      if (!OKP_CURVES.has(jwk.crv)) {\n        throw new errors.JOSENotSupported(`unsupported OKP key curve: ${jwk.crv}`);\n      }\n      break;\n    case 'RSA':\n      break;\n    default:\n      throw new errors.JOSENotSupported(`unsupported key type: ${jwk.kty}`);\n  }\n  if (jwk.d) {\n    return jwkToPem[jwk.kty].private(jwk, {\n      calculateMissingRSAPrimes\n    });\n  }\n  return jwkToPem[jwk.kty].public(jwk);\n};","map":{"version":3,"names":["EOL","require","errors","keyObjectSupported","createPublicKey","base64url","asn1","computePrimes","OKP_CURVES","EC_CURVES","formatPem","base64pem","descriptor","match","join","okpToJWK","private","crv","keyObject","der","export","type","format","OneAsymmetricKey","get","privateKey","d","decode","public","encodeBuffer","PublicKeyInfo","publicKey","data","x","kty","keyObjectToJWK","rsa","PrivateKeyInfo","RSAPrivateKey","version","n","e","p","q","dp","dq","qi","JOSENotSupported","encodeBigInt","RSAPublicKey","ec","ECPrivateKey","algorithm","parameters","value","slice","length","y","ed25519","ed448","x25519","x448","module","exports","asymmetricKeyType","concatEcPublicKey","unused","Buffer","concat","alloc","decodeToBuffer","jwkToPem","RSA","jwk","calculateMissingRSAPrimes","JWKInvalid","encode","BigInt","toString","label","EC","OKP","b64","write","has"],"sources":["/Users/chamas/Final-Project/final-project/node_modules/jose/lib/help/key_utils.js"],"sourcesContent":["const { EOL } = require('os')\n\nconst errors = require('../errors')\n\nconst { keyObjectSupported } = require('./runtime_support')\nconst { createPublicKey } = require('./key_object')\nconst base64url = require('./base64url')\nconst asn1 = require('./asn1')\nconst computePrimes = require('./rsa_primes')\nconst { OKP_CURVES, EC_CURVES } = require('../registry')\n\nconst formatPem = (base64pem, descriptor) => `-----BEGIN ${descriptor} KEY-----${EOL}${(base64pem.match(/.{1,64}/g) || []).join(EOL)}${EOL}-----END ${descriptor} KEY-----`\n\nconst okpToJWK = {\n  private (crv, keyObject) {\n    const der = keyObject.export({ type: 'pkcs8', format: 'der' })\n    const OneAsymmetricKey = asn1.get('OneAsymmetricKey')\n    const { privateKey: { privateKey: d } } = OneAsymmetricKey.decode(der)\n\n    return {\n      ...okpToJWK.public(crv, createPublicKey(keyObject)),\n      d: base64url.encodeBuffer(d)\n    }\n  },\n  public (crv, keyObject) {\n    const der = keyObject.export({ type: 'spki', format: 'der' })\n\n    const PublicKeyInfo = asn1.get('PublicKeyInfo')\n\n    const { publicKey: { data: x } } = PublicKeyInfo.decode(der)\n\n    return {\n      kty: 'OKP',\n      crv,\n      x: base64url.encodeBuffer(x)\n    }\n  }\n}\n\nconst keyObjectToJWK = {\n  rsa: {\n    private (keyObject) {\n      const der = keyObject.export({ type: 'pkcs8', format: 'der' })\n\n      const PrivateKeyInfo = asn1.get('PrivateKeyInfo')\n      const RSAPrivateKey = asn1.get('RSAPrivateKey')\n\n      const { privateKey } = PrivateKeyInfo.decode(der)\n      const { version, n, e, d, p, q, dp, dq, qi } = RSAPrivateKey.decode(privateKey)\n\n      if (version !== 'two-prime') {\n        throw new errors.JOSENotSupported('Private RSA keys with more than two primes are not supported')\n      }\n\n      return {\n        kty: 'RSA',\n        n: base64url.encodeBigInt(n),\n        e: base64url.encodeBigInt(e),\n        d: base64url.encodeBigInt(d),\n        p: base64url.encodeBigInt(p),\n        q: base64url.encodeBigInt(q),\n        dp: base64url.encodeBigInt(dp),\n        dq: base64url.encodeBigInt(dq),\n        qi: base64url.encodeBigInt(qi)\n      }\n    },\n    public (keyObject) {\n      const der = keyObject.export({ type: 'spki', format: 'der' })\n\n      const PublicKeyInfo = asn1.get('PublicKeyInfo')\n      const RSAPublicKey = asn1.get('RSAPublicKey')\n\n      const { publicKey: { data: publicKey } } = PublicKeyInfo.decode(der)\n      const { n, e } = RSAPublicKey.decode(publicKey)\n\n      return {\n        kty: 'RSA',\n        n: base64url.encodeBigInt(n),\n        e: base64url.encodeBigInt(e)\n      }\n    }\n  },\n  ec: {\n    private (keyObject) {\n      const der = keyObject.export({ type: 'pkcs8', format: 'der' })\n\n      const PrivateKeyInfo = asn1.get('PrivateKeyInfo')\n      const ECPrivateKey = asn1.get('ECPrivateKey')\n\n      const { privateKey, algorithm: { parameters: { value: crv } } } = PrivateKeyInfo.decode(der)\n      const { privateKey: d, publicKey } = ECPrivateKey.decode(privateKey)\n\n      if (typeof publicKey === 'undefined') {\n        if (keyObjectSupported) {\n          return {\n            ...keyObjectToJWK.ec.public(createPublicKey(keyObject)),\n            d: base64url.encodeBuffer(d)\n          }\n        }\n\n        throw new errors.JOSENotSupported('Private EC keys without the public key embedded are not supported in your Node.js runtime version')\n      }\n\n      const x = publicKey.data.slice(1, ((publicKey.data.length - 1) / 2) + 1)\n      const y = publicKey.data.slice(((publicKey.data.length - 1) / 2) + 1)\n\n      return {\n        kty: 'EC',\n        crv,\n        d: base64url.encodeBuffer(d),\n        x: base64url.encodeBuffer(x),\n        y: base64url.encodeBuffer(y)\n      }\n    },\n    public (keyObject) {\n      const der = keyObject.export({ type: 'spki', format: 'der' })\n\n      const PublicKeyInfo = asn1.get('PublicKeyInfo')\n\n      const { publicKey: { data: publicKey }, algorithm: { parameters: { value: crv } } } = PublicKeyInfo.decode(der)\n\n      const x = publicKey.slice(1, ((publicKey.length - 1) / 2) + 1)\n      const y = publicKey.slice(((publicKey.length - 1) / 2) + 1)\n\n      return {\n        kty: 'EC',\n        crv,\n        x: base64url.encodeBuffer(x),\n        y: base64url.encodeBuffer(y)\n      }\n    }\n  },\n  ed25519: {\n    private (keyObject) {\n      return okpToJWK.private('Ed25519', keyObject)\n    },\n    public (keyObject) {\n      return okpToJWK.public('Ed25519', keyObject)\n    }\n  },\n  ed448: {\n    private (keyObject) {\n      return okpToJWK.private('Ed448', keyObject)\n    },\n    public (keyObject) {\n      return okpToJWK.public('Ed448', keyObject)\n    }\n  },\n  x25519: {\n    private (keyObject) {\n      return okpToJWK.private('X25519', keyObject)\n    },\n    public (keyObject) {\n      return okpToJWK.public('X25519', keyObject)\n    }\n  },\n  x448: {\n    private (keyObject) {\n      return okpToJWK.private('X448', keyObject)\n    },\n    public (keyObject) {\n      return okpToJWK.public('X448', keyObject)\n    }\n  }\n}\n\nmodule.exports.keyObjectToJWK = (keyObject) => {\n  if (keyObject.type === 'private') {\n    return keyObjectToJWK[keyObject.asymmetricKeyType].private(keyObject)\n  }\n\n  return keyObjectToJWK[keyObject.asymmetricKeyType].public(keyObject)\n}\n\nconst concatEcPublicKey = (x, y) => ({\n  unused: 0,\n  data: Buffer.concat([\n    Buffer.alloc(1, 4),\n    base64url.decodeToBuffer(x),\n    base64url.decodeToBuffer(y)\n  ])\n})\n\nconst jwkToPem = {\n  RSA: {\n    private (jwk, { calculateMissingRSAPrimes }) {\n      const RSAPrivateKey = asn1.get('RSAPrivateKey')\n\n      if ('oth' in jwk) {\n        throw new errors.JOSENotSupported('Private RSA keys with more than two primes are not supported')\n      }\n\n      if (jwk.p || jwk.q || jwk.dp || jwk.dq || jwk.qi) {\n        if (!(jwk.p && jwk.q && jwk.dp && jwk.dq && jwk.qi)) {\n          throw new errors.JWKInvalid('all other private key parameters must be present when any one of them is present')\n        }\n      } else if (calculateMissingRSAPrimes) {\n        jwk = computePrimes(jwk)\n      } else if (!calculateMissingRSAPrimes) {\n        throw new errors.JOSENotSupported('importing private RSA keys without all other private key parameters is not enabled, see documentation and its advisory on how and when its ok to enable it')\n      }\n\n      return RSAPrivateKey.encode({\n        version: 0,\n        n: BigInt(`0x${base64url.decodeToBuffer(jwk.n).toString('hex')}`),\n        e: BigInt(`0x${base64url.decodeToBuffer(jwk.e).toString('hex')}`),\n        d: BigInt(`0x${base64url.decodeToBuffer(jwk.d).toString('hex')}`),\n        p: BigInt(`0x${base64url.decodeToBuffer(jwk.p).toString('hex')}`),\n        q: BigInt(`0x${base64url.decodeToBuffer(jwk.q).toString('hex')}`),\n        dp: BigInt(`0x${base64url.decodeToBuffer(jwk.dp).toString('hex')}`),\n        dq: BigInt(`0x${base64url.decodeToBuffer(jwk.dq).toString('hex')}`),\n        qi: BigInt(`0x${base64url.decodeToBuffer(jwk.qi).toString('hex')}`)\n      }, 'pem', { label: 'RSA PRIVATE KEY' })\n    },\n    public (jwk) {\n      const RSAPublicKey = asn1.get('RSAPublicKey')\n\n      return RSAPublicKey.encode({\n        version: 0,\n        n: BigInt(`0x${base64url.decodeToBuffer(jwk.n).toString('hex')}`),\n        e: BigInt(`0x${base64url.decodeToBuffer(jwk.e).toString('hex')}`)\n      }, 'pem', { label: 'RSA PUBLIC KEY' })\n    }\n  },\n  EC: {\n    private (jwk) {\n      const ECPrivateKey = asn1.get('ECPrivateKey')\n\n      return ECPrivateKey.encode({\n        version: 1,\n        privateKey: base64url.decodeToBuffer(jwk.d),\n        parameters: { type: 'namedCurve', value: jwk.crv },\n        publicKey: concatEcPublicKey(jwk.x, jwk.y)\n      }, 'pem', { label: 'EC PRIVATE KEY' })\n    },\n    public (jwk) {\n      const PublicKeyInfo = asn1.get('PublicKeyInfo')\n\n      return PublicKeyInfo.encode({\n        algorithm: {\n          algorithm: 'ecPublicKey',\n          parameters: { type: 'namedCurve', value: jwk.crv }\n        },\n        publicKey: concatEcPublicKey(jwk.x, jwk.y)\n      }, 'pem', { label: 'PUBLIC KEY' })\n    }\n  },\n  OKP: {\n    private (jwk) {\n      const OneAsymmetricKey = asn1.get('OneAsymmetricKey')\n\n      const b64 = OneAsymmetricKey.encode({\n        version: 0,\n        privateKey: { privateKey: base64url.decodeToBuffer(jwk.d) },\n        algorithm: { algorithm: jwk.crv }\n      }, 'der')\n\n      // TODO: WHYYY? https://github.com/indutny/asn1.js/issues/110\n      b64.write('04', 12, 1, 'hex')\n\n      return formatPem(b64.toString('base64'), 'PRIVATE')\n    },\n    public (jwk) {\n      const PublicKeyInfo = asn1.get('PublicKeyInfo')\n\n      return PublicKeyInfo.encode({\n        algorithm: { algorithm: jwk.crv },\n        publicKey: {\n          unused: 0,\n          data: base64url.decodeToBuffer(jwk.x)\n        }\n      }, 'pem', { label: 'PUBLIC KEY' })\n    }\n  }\n}\n\nmodule.exports.jwkToPem = (jwk, { calculateMissingRSAPrimes = false } = {}) => {\n  switch (jwk.kty) {\n    case 'EC':\n      if (!EC_CURVES.has(jwk.crv)) {\n        throw new errors.JOSENotSupported(`unsupported EC key curve: ${jwk.crv}`)\n      }\n      break\n    case 'OKP':\n      if (!OKP_CURVES.has(jwk.crv)) {\n        throw new errors.JOSENotSupported(`unsupported OKP key curve: ${jwk.crv}`)\n      }\n      break\n    case 'RSA':\n      break\n    default:\n      throw new errors.JOSENotSupported(`unsupported key type: ${jwk.kty}`)\n  }\n\n  if (jwk.d) {\n    return jwkToPem[jwk.kty].private(jwk, { calculateMissingRSAPrimes })\n  }\n\n  return jwkToPem[jwk.kty].public(jwk)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}