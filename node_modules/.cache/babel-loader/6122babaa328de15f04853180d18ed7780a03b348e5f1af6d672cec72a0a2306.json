{"ast":null,"code":"const {\n  createHash\n} = require('crypto');\nconst ecdhComputeSecret = require('./compute_secret');\nconst concat = (key, length, value) => {\n  const iterations = Math.ceil(length / 32);\n  let res;\n  for (let iter = 1; iter <= iterations; iter++) {\n    const buf = Buffer.allocUnsafe(4 + key.length + value.length);\n    buf.writeUInt32BE(iter, 0);\n    key.copy(buf, 4);\n    value.copy(buf, 4 + key.length);\n    if (!res) {\n      res = createHash('sha256').update(buf).digest();\n    } else {\n      res = Buffer.concat([res, createHash('sha256').update(buf).digest()]);\n    }\n  }\n  return res.slice(0, length);\n};\nconst uint32be = (value, buf = Buffer.allocUnsafe(4)) => {\n  buf.writeUInt32BE(value);\n  return buf;\n};\nconst lengthAndInput = input => Buffer.concat([uint32be(input.length), input]);\nmodule.exports = (alg, keyLen, privKey, pubKey, {\n  apu = Buffer.alloc(0),\n  apv = Buffer.alloc(0)\n} = {}, computeSecret = ecdhComputeSecret) => {\n  const value = Buffer.concat([lengthAndInput(Buffer.from(alg)), lengthAndInput(apu), lengthAndInput(apv), uint32be(keyLen)]);\n  const sharedSecret = computeSecret(privKey, pubKey);\n  return concat(sharedSecret, keyLen / 8, value);\n};","map":{"version":3,"names":["createHash","require","ecdhComputeSecret","concat","key","length","value","iterations","Math","ceil","res","iter","buf","Buffer","allocUnsafe","writeUInt32BE","copy","update","digest","slice","uint32be","lengthAndInput","input","module","exports","alg","keyLen","privKey","pubKey","apu","alloc","apv","computeSecret","from","sharedSecret"],"sources":["/Users/chamas/Final-Project/final-project/node_modules/jose/lib/jwa/ecdh/derive.js"],"sourcesContent":["const { createHash } = require('crypto')\nconst ecdhComputeSecret = require('./compute_secret')\n\nconst concat = (key, length, value) => {\n  const iterations = Math.ceil(length / 32)\n  let res\n\n  for (let iter = 1; iter <= iterations; iter++) {\n    const buf = Buffer.allocUnsafe(4 + key.length + value.length)\n    buf.writeUInt32BE(iter, 0)\n    key.copy(buf, 4)\n    value.copy(buf, 4 + key.length)\n    if (!res) {\n      res = createHash('sha256').update(buf).digest()\n    } else {\n      res = Buffer.concat([res, createHash('sha256').update(buf).digest()])\n    }\n  }\n\n  return res.slice(0, length)\n}\n\nconst uint32be = (value, buf = Buffer.allocUnsafe(4)) => {\n  buf.writeUInt32BE(value)\n  return buf\n}\n\nconst lengthAndInput = input => Buffer.concat([uint32be(input.length), input])\n\nmodule.exports = (alg, keyLen, privKey, pubKey, { apu = Buffer.alloc(0), apv = Buffer.alloc(0) } = {}, computeSecret = ecdhComputeSecret) => {\n  const value = Buffer.concat([\n    lengthAndInput(Buffer.from(alg)),\n    lengthAndInput(apu),\n    lengthAndInput(apv),\n    uint32be(keyLen)\n  ])\n\n  const sharedSecret = computeSecret(privKey, pubKey)\n  return concat(sharedSecret, keyLen / 8, value)\n}\n"],"mappings":"AAAA,MAAM;EAAEA;AAAW,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AACxC,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAErD,MAAME,MAAM,GAAGA,CAACC,GAAG,EAAEC,MAAM,EAAEC,KAAK,KAAK;EACrC,MAAMC,UAAU,GAAGC,IAAI,CAACC,IAAI,CAACJ,MAAM,GAAG,EAAE,CAAC;EACzC,IAAIK,GAAG;EAEP,KAAK,IAAIC,IAAI,GAAG,CAAC,EAAEA,IAAI,IAAIJ,UAAU,EAAEI,IAAI,EAAE,EAAE;IAC7C,MAAMC,GAAG,GAAGC,MAAM,CAACC,WAAW,CAAC,CAAC,GAAGV,GAAG,CAACC,MAAM,GAAGC,KAAK,CAACD,MAAM,CAAC;IAC7DO,GAAG,CAACG,aAAa,CAACJ,IAAI,EAAE,CAAC,CAAC;IAC1BP,GAAG,CAACY,IAAI,CAACJ,GAAG,EAAE,CAAC,CAAC;IAChBN,KAAK,CAACU,IAAI,CAACJ,GAAG,EAAE,CAAC,GAAGR,GAAG,CAACC,MAAM,CAAC;IAC/B,IAAI,CAACK,GAAG,EAAE;MACRA,GAAG,GAAGV,UAAU,CAAC,QAAQ,CAAC,CAACiB,MAAM,CAACL,GAAG,CAAC,CAACM,MAAM,CAAC,CAAC;IACjD,CAAC,MAAM;MACLR,GAAG,GAAGG,MAAM,CAACV,MAAM,CAAC,CAACO,GAAG,EAAEV,UAAU,CAAC,QAAQ,CAAC,CAACiB,MAAM,CAACL,GAAG,CAAC,CAACM,MAAM,CAAC,CAAC,CAAC,CAAC;IACvE;EACF;EAEA,OAAOR,GAAG,CAACS,KAAK,CAAC,CAAC,EAAEd,MAAM,CAAC;AAC7B,CAAC;AAED,MAAMe,QAAQ,GAAGA,CAACd,KAAK,EAAEM,GAAG,GAAGC,MAAM,CAACC,WAAW,CAAC,CAAC,CAAC,KAAK;EACvDF,GAAG,CAACG,aAAa,CAACT,KAAK,CAAC;EACxB,OAAOM,GAAG;AACZ,CAAC;AAED,MAAMS,cAAc,GAAGC,KAAK,IAAIT,MAAM,CAACV,MAAM,CAAC,CAACiB,QAAQ,CAACE,KAAK,CAACjB,MAAM,CAAC,EAAEiB,KAAK,CAAC,CAAC;AAE9EC,MAAM,CAACC,OAAO,GAAG,CAACC,GAAG,EAAEC,MAAM,EAAEC,OAAO,EAAEC,MAAM,EAAE;EAAEC,GAAG,GAAGhB,MAAM,CAACiB,KAAK,CAAC,CAAC,CAAC;EAAEC,GAAG,GAAGlB,MAAM,CAACiB,KAAK,CAAC,CAAC;AAAE,CAAC,GAAG,CAAC,CAAC,EAAEE,aAAa,GAAG9B,iBAAiB,KAAK;EAC3I,MAAMI,KAAK,GAAGO,MAAM,CAACV,MAAM,CAAC,CAC1BkB,cAAc,CAACR,MAAM,CAACoB,IAAI,CAACR,GAAG,CAAC,CAAC,EAChCJ,cAAc,CAACQ,GAAG,CAAC,EACnBR,cAAc,CAACU,GAAG,CAAC,EACnBX,QAAQ,CAACM,MAAM,CAAC,CACjB,CAAC;EAEF,MAAMQ,YAAY,GAAGF,aAAa,CAACL,OAAO,EAAEC,MAAM,CAAC;EACnD,OAAOzB,MAAM,CAAC+B,YAAY,EAAER,MAAM,GAAG,CAAC,EAAEpB,KAAK,CAAC;AAChD,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}