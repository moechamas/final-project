{"ast":null,"code":"const {\n  randomBytes\n} = require('crypto');\nconst base64url = require('./base64url');\nconst errors = require('../errors');\nconst ZERO = BigInt(0);\nconst ONE = BigInt(1);\nconst TWO = BigInt(2);\nconst toJWKParameter = n => {\n  const hex = n.toString(16);\n  return base64url.encodeBuffer(Buffer.from(hex.length % 2 ? `0${hex}` : hex, 'hex'));\n};\nconst fromBuffer = buf => BigInt(`0x${buf.toString('hex')}`);\nconst bitLength = n => n.toString(2).length;\nconst eGcdX = (a, b) => {\n  let x = ZERO;\n  let y = ONE;\n  let u = ONE;\n  let v = ZERO;\n  while (a !== ZERO) {\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    b = a;\n    a = r;\n    x = u;\n    y = v;\n    u = m;\n    v = n;\n  }\n  return x;\n};\nconst gcd = (a, b) => {\n  let shift = ZERO;\n  while (!((a | b) & ONE)) {\n    a >>= ONE;\n    b >>= ONE;\n    shift++;\n  }\n  while (!(a & ONE)) {\n    a >>= ONE;\n  }\n  do {\n    while (!(b & ONE)) {\n      b >>= ONE;\n    }\n    if (a > b) {\n      const x = a;\n      a = b;\n      b = x;\n    }\n    b -= a;\n  } while (b);\n  return a << shift;\n};\nconst modPow = (a, b, n) => {\n  a = toZn(a, n);\n  let result = ONE;\n  let x = a;\n  while (b > 0) {\n    const leastSignificantBit = b % TWO;\n    b = b / TWO;\n    if (leastSignificantBit === ONE) {\n      result = result * x;\n      result = result % n;\n    }\n    x = x * x;\n    x = x % n;\n  }\n  return result;\n};\nconst randBetween = (min, max) => {\n  const interval = max - min;\n  const bitLen = bitLength(interval);\n  let rnd;\n  do {\n    rnd = fromBuffer(randBits(bitLen));\n  } while (rnd > interval);\n  return rnd + min;\n};\nconst randBits = bitLength => {\n  const byteLength = Math.ceil(bitLength / 8);\n  const rndBytes = randomBytes(byteLength);\n  // Fill with 0's the extra bits\n  rndBytes[0] = rndBytes[0] & 2 ** (bitLength % 8) - 1;\n  return rndBytes;\n};\nconst toZn = (a, n) => {\n  a = a % n;\n  return a < 0 ? a + n : a;\n};\nconst odd = n => {\n  let r = n;\n  while (r % TWO === ZERO) {\n    r = r / TWO;\n  }\n  return r;\n};\n\n// not sold on these values\nconst maxCountWhileNoY = 30;\nconst maxCountWhileInot0 = 22;\nconst getPrimeFactors = (e, d, n) => {\n  const r = odd(e * d - ONE);\n  let countWhileNoY = 0;\n  let y;\n  do {\n    countWhileNoY++;\n    if (countWhileNoY === maxCountWhileNoY) {\n      throw new errors.JWKImportFailed('failed to calculate missing primes');\n    }\n    let countWhileInot0 = 0;\n    let i = modPow(randBetween(TWO, n), r, n);\n    let o = ZERO;\n    while (i !== ONE) {\n      countWhileInot0++;\n      if (countWhileInot0 === maxCountWhileInot0) {\n        throw new errors.JWKImportFailed('failed to calculate missing primes');\n      }\n      o = i;\n      i = i * i % n;\n    }\n    if (o !== n - ONE) {\n      y = o;\n    }\n  } while (!y);\n  const p = gcd(y - ONE, n);\n  const q = n / p;\n  return p > q ? {\n    p,\n    q\n  } : {\n    p: q,\n    q: p\n  };\n};\nmodule.exports = jwk => {\n  const e = fromBuffer(base64url.decodeToBuffer(jwk.e));\n  const d = fromBuffer(base64url.decodeToBuffer(jwk.d));\n  const n = fromBuffer(base64url.decodeToBuffer(jwk.n));\n  if (d >= n) {\n    throw new errors.JWKInvalid('invalid RSA private exponent');\n  }\n  const {\n    p,\n    q\n  } = getPrimeFactors(e, d, n);\n  const dp = d % (p - ONE);\n  const dq = d % (q - ONE);\n  const qi = toZn(eGcdX(toZn(q, p), p), p);\n  return {\n    ...jwk,\n    p: toJWKParameter(p),\n    q: toJWKParameter(q),\n    dp: toJWKParameter(dp),\n    dq: toJWKParameter(dq),\n    qi: toJWKParameter(qi)\n  };\n};","map":{"version":3,"names":["randomBytes","require","base64url","errors","ZERO","BigInt","ONE","TWO","toJWKParameter","n","hex","toString","encodeBuffer","Buffer","from","length","fromBuffer","buf","bitLength","eGcdX","a","b","x","y","u","v","q","r","m","gcd","shift","modPow","toZn","result","leastSignificantBit","randBetween","min","max","interval","bitLen","rnd","randBits","byteLength","Math","ceil","rndBytes","odd","maxCountWhileNoY","maxCountWhileInot0","getPrimeFactors","e","d","countWhileNoY","JWKImportFailed","countWhileInot0","i","o","p","module","exports","jwk","decodeToBuffer","JWKInvalid","dp","dq","qi"],"sources":["/Users/chamas/Final-Project/final-project/node_modules/jose/lib/help/rsa_primes.js"],"sourcesContent":["const { randomBytes } = require('crypto')\n\nconst base64url = require('./base64url')\nconst errors = require('../errors')\n\nconst ZERO = BigInt(0)\nconst ONE = BigInt(1)\nconst TWO = BigInt(2)\n\nconst toJWKParameter = (n) => {\n  const hex = n.toString(16)\n  return base64url.encodeBuffer(Buffer.from(hex.length % 2 ? `0${hex}` : hex, 'hex'))\n}\nconst fromBuffer = buf => BigInt(`0x${buf.toString('hex')}`)\nconst bitLength = n => n.toString(2).length\n\nconst eGcdX = (a, b) => {\n  let x = ZERO\n  let y = ONE\n  let u = ONE\n  let v = ZERO\n\n  while (a !== ZERO) {\n    const q = b / a\n    const r = b % a\n    const m = x - (u * q)\n    const n = y - (v * q)\n    b = a\n    a = r\n    x = u\n    y = v\n    u = m\n    v = n\n  }\n  return x\n}\n\nconst gcd = (a, b) => {\n  let shift = ZERO\n  while (!((a | b) & ONE)) {\n    a >>= ONE\n    b >>= ONE\n    shift++\n  }\n  while (!(a & ONE)) {\n    a >>= ONE\n  }\n  do {\n    while (!(b & ONE)) {\n      b >>= ONE\n    }\n    if (a > b) {\n      const x = a\n      a = b\n      b = x\n    }\n    b -= a\n  } while (b)\n\n  return a << shift\n}\n\nconst modPow = (a, b, n) => {\n  a = toZn(a, n)\n  let result = ONE\n  let x = a\n  while (b > 0) {\n    const leastSignificantBit = b % TWO\n    b = b / TWO\n    if (leastSignificantBit === ONE) {\n      result = result * x\n      result = result % n\n    }\n    x = x * x\n    x = x % n\n  }\n  return result\n}\n\nconst randBetween = (min, max) => {\n  const interval = max - min\n  const bitLen = bitLength(interval)\n  let rnd\n  do {\n    rnd = fromBuffer(randBits(bitLen))\n  } while (rnd > interval)\n  return rnd + min\n}\n\nconst randBits = (bitLength) => {\n  const byteLength = Math.ceil(bitLength / 8)\n  const rndBytes = randomBytes(byteLength)\n  // Fill with 0's the extra bits\n  rndBytes[0] = rndBytes[0] & (2 ** (bitLength % 8) - 1)\n  return rndBytes\n}\n\nconst toZn = (a, n) => {\n  a = a % n\n  return (a < 0) ? a + n : a\n}\n\nconst odd = (n) => {\n  let r = n\n  while (r % TWO === ZERO) {\n    r = r / TWO\n  }\n  return r\n}\n\n// not sold on these values\nconst maxCountWhileNoY = 30\nconst maxCountWhileInot0 = 22\n\nconst getPrimeFactors = (e, d, n) => {\n  const r = odd(e * d - ONE)\n\n  let countWhileNoY = 0\n  let y\n  do {\n    countWhileNoY++\n    if (countWhileNoY === maxCountWhileNoY) {\n      throw new errors.JWKImportFailed('failed to calculate missing primes')\n    }\n\n    let countWhileInot0 = 0\n    let i = modPow(randBetween(TWO, n), r, n)\n    let o = ZERO\n    while (i !== ONE) {\n      countWhileInot0++\n      if (countWhileInot0 === maxCountWhileInot0) {\n        throw new errors.JWKImportFailed('failed to calculate missing primes')\n      }\n      o = i\n      i = (i * i) % n\n    }\n    if (o !== (n - ONE)) {\n      y = o\n    }\n  } while (!y)\n\n  const p = gcd(y - ONE, n)\n  const q = n / p\n\n  return p > q ? { p, q } : { p: q, q: p }\n}\n\nmodule.exports = (jwk) => {\n  const e = fromBuffer(base64url.decodeToBuffer(jwk.e))\n  const d = fromBuffer(base64url.decodeToBuffer(jwk.d))\n  const n = fromBuffer(base64url.decodeToBuffer(jwk.n))\n\n  if (d >= n) {\n    throw new errors.JWKInvalid('invalid RSA private exponent')\n  }\n\n  const { p, q } = getPrimeFactors(e, d, n)\n  const dp = d % (p - ONE)\n  const dq = d % (q - ONE)\n  const qi = toZn(eGcdX(toZn(q, p), p), p)\n\n  return {\n    ...jwk,\n    p: toJWKParameter(p),\n    q: toJWKParameter(q),\n    dp: toJWKParameter(dp),\n    dq: toJWKParameter(dq),\n    qi: toJWKParameter(qi)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}