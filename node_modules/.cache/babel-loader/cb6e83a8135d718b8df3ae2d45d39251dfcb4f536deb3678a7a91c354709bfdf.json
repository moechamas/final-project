{"ast":null,"code":"const {\n  promisify\n} = require('util');\n\n// Default hook stores an entry in the logout store for `sid` (if available) and `sub` (if available).\nmodule.exports = async (token, config) => {\n  const {\n    session: {\n      absoluteDuration,\n      rolling: rollingEnabled,\n      rollingDuration,\n      store\n    },\n    backchannelLogout\n  } = config;\n  const backchannelLogoutStore = backchannelLogout && backchannelLogout.store || store;\n  const maxAge = (rollingEnabled ? Math.min(absoluteDuration, rollingDuration) : absoluteDuration) * 1000;\n  const payload = {\n    // The \"cookie\" prop makes the payload compatible with\n    // `express-session` stores.\n    cookie: {\n      expires: Date.now() + maxAge,\n      maxAge\n    }\n  };\n  const set = promisify(backchannelLogoutStore.set).bind(backchannelLogoutStore);\n  const {\n    iss,\n    sid,\n    sub\n  } = token;\n  if (!sid && !sub) {\n    throw new Error(`The Logout Token must have a 'sid' or a 'sub'`);\n  }\n  await Promise.all([sid && set(`${iss}|${sid}`, payload), sub && set(`${iss}|${sub}`, payload)]);\n};","map":{"version":3,"names":["promisify","require","module","exports","token","config","session","absoluteDuration","rolling","rollingEnabled","rollingDuration","store","backchannelLogout","backchannelLogoutStore","maxAge","Math","min","payload","cookie","expires","Date","now","set","bind","iss","sid","sub","Error","Promise","all"],"sources":["/Users/chamas/Final-Project/final-project/node_modules/express-openid-connect/lib/hooks/backchannelLogout/onLogoutToken.js"],"sourcesContent":["const { promisify } = require('util');\n\n// Default hook stores an entry in the logout store for `sid` (if available) and `sub` (if available).\nmodule.exports = async (token, config) => {\n  const {\n    session: {\n      absoluteDuration,\n      rolling: rollingEnabled,\n      rollingDuration,\n      store,\n    },\n    backchannelLogout,\n  } = config;\n  const backchannelLogoutStore =\n    (backchannelLogout && backchannelLogout.store) || store;\n  const maxAge =\n    (rollingEnabled\n      ? Math.min(absoluteDuration, rollingDuration)\n      : absoluteDuration) * 1000;\n  const payload = {\n    // The \"cookie\" prop makes the payload compatible with\n    // `express-session` stores.\n    cookie: {\n      expires: Date.now() + maxAge,\n      maxAge,\n    },\n  };\n  const set = promisify(backchannelLogoutStore.set).bind(\n    backchannelLogoutStore\n  );\n  const { iss, sid, sub } = token;\n  if (!sid && !sub) {\n    throw new Error(`The Logout Token must have a 'sid' or a 'sub'`);\n  }\n  await Promise.all([\n    sid && set(`${iss}|${sid}`, payload),\n    sub && set(`${iss}|${sub}`, payload),\n  ]);\n};\n"],"mappings":"AAAA,MAAM;EAAEA;AAAU,CAAC,GAAGC,OAAO,CAAC,MAAM,CAAC;;AAErC;AACAC,MAAM,CAACC,OAAO,GAAG,OAAOC,KAAK,EAAEC,MAAM,KAAK;EACxC,MAAM;IACJC,OAAO,EAAE;MACPC,gBAAgB;MAChBC,OAAO,EAAEC,cAAc;MACvBC,eAAe;MACfC;IACF,CAAC;IACDC;EACF,CAAC,GAAGP,MAAM;EACV,MAAMQ,sBAAsB,GACzBD,iBAAiB,IAAIA,iBAAiB,CAACD,KAAK,IAAKA,KAAK;EACzD,MAAMG,MAAM,GACV,CAACL,cAAc,GACXM,IAAI,CAACC,GAAG,CAACT,gBAAgB,EAAEG,eAAe,CAAC,GAC3CH,gBAAgB,IAAI,IAAI;EAC9B,MAAMU,OAAO,GAAG;IACd;IACA;IACAC,MAAM,EAAE;MACNC,OAAO,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGP,MAAM;MAC5BA;IACF;EACF,CAAC;EACD,MAAMQ,GAAG,GAAGtB,SAAS,CAACa,sBAAsB,CAACS,GAAG,CAAC,CAACC,IAAI,CACpDV,sBACF,CAAC;EACD,MAAM;IAAEW,GAAG;IAAEC,GAAG;IAAEC;EAAI,CAAC,GAAGtB,KAAK;EAC/B,IAAI,CAACqB,GAAG,IAAI,CAACC,GAAG,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAE,+CAA8C,CAAC;EAClE;EACA,MAAMC,OAAO,CAACC,GAAG,CAAC,CAChBJ,GAAG,IAAIH,GAAG,CAAE,GAAEE,GAAI,IAAGC,GAAI,EAAC,EAAER,OAAO,CAAC,EACpCS,GAAG,IAAIJ,GAAG,CAAE,GAAEE,GAAI,IAAGE,GAAI,EAAC,EAAET,OAAO,CAAC,CACrC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}