{"ast":null,"code":"const {\n  improvedDH\n} = require('../../help/runtime_support');\nconst {\n  KEYLENGTHS\n} = require('../../registry');\nconst {\n  generateSync\n} = require('../../jwk/generate');\nconst derive = require('./derive');\nconst wrapKey = (key, payload, {\n  enc\n}) => {\n  const epk = generateSync(key.kty, key.crv);\n  const derivedKey = derive(enc, KEYLENGTHS.get(enc), epk, key);\n  return {\n    wrapped: derivedKey,\n    header: {\n      epk: {\n        kty: key.kty,\n        crv: key.crv,\n        x: epk.x,\n        y: epk.y\n      }\n    }\n  };\n};\nconst unwrapKey = (key, payload, header) => {\n  const {\n    enc,\n    epk\n  } = header;\n  return derive(enc, KEYLENGTHS.get(enc), key, epk, header);\n};\nmodule.exports = (JWA, JWK) => {\n  JWA.keyManagementEncrypt.set('ECDH-ES', wrapKey);\n  JWA.keyManagementDecrypt.set('ECDH-ES', unwrapKey);\n  JWK.EC.deriveKey['ECDH-ES'] = key => (key.use === 'enc' || key.use === undefined) && key.crv !== 'secp256k1';\n  if (improvedDH) {\n    JWK.OKP.deriveKey['ECDH-ES'] = key => (key.use === 'enc' || key.use === undefined) && key.keyObject.asymmetricKeyType.startsWith('x');\n  }\n};","map":{"version":3,"names":["improvedDH","require","KEYLENGTHS","generateSync","derive","wrapKey","key","payload","enc","epk","kty","crv","derivedKey","get","wrapped","header","x","y","unwrapKey","module","exports","JWA","JWK","keyManagementEncrypt","set","keyManagementDecrypt","EC","deriveKey","use","undefined","OKP","keyObject","asymmetricKeyType","startsWith"],"sources":["/Users/chamas/Final-Project/final-project/node_modules/jose/lib/jwa/ecdh/dir.js"],"sourcesContent":["const { improvedDH } = require('../../help/runtime_support')\nconst { KEYLENGTHS } = require('../../registry')\nconst { generateSync } = require('../../jwk/generate')\n\nconst derive = require('./derive')\n\nconst wrapKey = (key, payload, { enc }) => {\n  const epk = generateSync(key.kty, key.crv)\n\n  const derivedKey = derive(enc, KEYLENGTHS.get(enc), epk, key)\n\n  return {\n    wrapped: derivedKey,\n    header: { epk: { kty: key.kty, crv: key.crv, x: epk.x, y: epk.y } }\n  }\n}\n\nconst unwrapKey = (key, payload, header) => {\n  const { enc, epk } = header\n  return derive(enc, KEYLENGTHS.get(enc), key, epk, header)\n}\n\nmodule.exports = (JWA, JWK) => {\n  JWA.keyManagementEncrypt.set('ECDH-ES', wrapKey)\n  JWA.keyManagementDecrypt.set('ECDH-ES', unwrapKey)\n  JWK.EC.deriveKey['ECDH-ES'] = key => (key.use === 'enc' || key.use === undefined) && key.crv !== 'secp256k1'\n\n  if (improvedDH) {\n    JWK.OKP.deriveKey['ECDH-ES'] = key => (key.use === 'enc' || key.use === undefined) && key.keyObject.asymmetricKeyType.startsWith('x')\n  }\n}\n"],"mappings":"AAAA,MAAM;EAAEA;AAAW,CAAC,GAAGC,OAAO,CAAC,4BAA4B,CAAC;AAC5D,MAAM;EAAEC;AAAW,CAAC,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAChD,MAAM;EAAEE;AAAa,CAAC,GAAGF,OAAO,CAAC,oBAAoB,CAAC;AAEtD,MAAMG,MAAM,GAAGH,OAAO,CAAC,UAAU,CAAC;AAElC,MAAMI,OAAO,GAAGA,CAACC,GAAG,EAAEC,OAAO,EAAE;EAAEC;AAAI,CAAC,KAAK;EACzC,MAAMC,GAAG,GAAGN,YAAY,CAACG,GAAG,CAACI,GAAG,EAAEJ,GAAG,CAACK,GAAG,CAAC;EAE1C,MAAMC,UAAU,GAAGR,MAAM,CAACI,GAAG,EAAEN,UAAU,CAACW,GAAG,CAACL,GAAG,CAAC,EAAEC,GAAG,EAAEH,GAAG,CAAC;EAE7D,OAAO;IACLQ,OAAO,EAAEF,UAAU;IACnBG,MAAM,EAAE;MAAEN,GAAG,EAAE;QAAEC,GAAG,EAAEJ,GAAG,CAACI,GAAG;QAAEC,GAAG,EAAEL,GAAG,CAACK,GAAG;QAAEK,CAAC,EAAEP,GAAG,CAACO,CAAC;QAAEC,CAAC,EAAER,GAAG,CAACQ;MAAE;IAAE;EACpE,CAAC;AACH,CAAC;AAED,MAAMC,SAAS,GAAGA,CAACZ,GAAG,EAAEC,OAAO,EAAEQ,MAAM,KAAK;EAC1C,MAAM;IAAEP,GAAG;IAAEC;EAAI,CAAC,GAAGM,MAAM;EAC3B,OAAOX,MAAM,CAACI,GAAG,EAAEN,UAAU,CAACW,GAAG,CAACL,GAAG,CAAC,EAAEF,GAAG,EAAEG,GAAG,EAAEM,MAAM,CAAC;AAC3D,CAAC;AAEDI,MAAM,CAACC,OAAO,GAAG,CAACC,GAAG,EAAEC,GAAG,KAAK;EAC7BD,GAAG,CAACE,oBAAoB,CAACC,GAAG,CAAC,SAAS,EAAEnB,OAAO,CAAC;EAChDgB,GAAG,CAACI,oBAAoB,CAACD,GAAG,CAAC,SAAS,EAAEN,SAAS,CAAC;EAClDI,GAAG,CAACI,EAAE,CAACC,SAAS,CAAC,SAAS,CAAC,GAAGrB,GAAG,IAAI,CAACA,GAAG,CAACsB,GAAG,KAAK,KAAK,IAAItB,GAAG,CAACsB,GAAG,KAAKC,SAAS,KAAKvB,GAAG,CAACK,GAAG,KAAK,WAAW;EAE5G,IAAIX,UAAU,EAAE;IACdsB,GAAG,CAACQ,GAAG,CAACH,SAAS,CAAC,SAAS,CAAC,GAAGrB,GAAG,IAAI,CAACA,GAAG,CAACsB,GAAG,KAAK,KAAK,IAAItB,GAAG,CAACsB,GAAG,KAAKC,SAAS,KAAKvB,GAAG,CAACyB,SAAS,CAACC,iBAAiB,CAACC,UAAU,CAAC,GAAG,CAAC;EACvI;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}