{"ast":null,"code":"const createError = require('http-errors');\nconst debug = require('../lib/debug')('requiresAuth');\nconst defaultRequiresLogin = req => !req.oidc.isAuthenticated();\n\n/**\n * Returns a middleware that checks whether an end-user is authenticated.\n * If end-user is not authenticated `res.oidc.login()` is triggered for an HTTP\n * request that can perform a redirect.\n */\nasync function requiresLoginMiddleware(requiresLoginCheck, req, res, next) {\n  if (!req.oidc) {\n    next(new Error('req.oidc is not found, did you include the auth middleware?'));\n    return;\n  }\n  if (requiresLoginCheck(req)) {\n    if (!res.oidc.errorOnRequiredAuth && req.accepts('html')) {\n      debug('authentication requirements not met with errorOnRequiredAuth() returning false, calling res.oidc.login()');\n      return res.oidc.login();\n    }\n    debug('authentication requirements not met with errorOnRequiredAuth() returning true, calling next() with an Unauthorized error');\n    next(createError.Unauthorized('Authentication is required for this route.'));\n    return;\n  }\n  debug('authentication requirements met, calling next()');\n  next();\n}\nmodule.exports.requiresAuth = function requiresAuth(requiresLoginCheck = defaultRequiresLogin) {\n  return requiresLoginMiddleware.bind(undefined, requiresLoginCheck);\n};\nfunction checkJSONprimitive(value) {\n  if (typeof value !== 'string' && typeof value !== 'number' && typeof value !== 'boolean' && value !== null) {\n    throw new TypeError('\"expected\" must be a string, number, boolean or null');\n  }\n}\nmodule.exports.claimEquals = function claimEquals(claim, expected) {\n  // check that claim is a string value\n  if (typeof claim !== 'string') {\n    throw new TypeError('\"claim\" must be a string');\n  }\n  // check that expected is a JSON supported primitive\n  checkJSONprimitive(expected);\n  const authenticationCheck = req => {\n    if (defaultRequiresLogin(req)) {\n      return true;\n    }\n    const {\n      idTokenClaims\n    } = req.oidc;\n    if (!(claim in idTokenClaims)) {\n      return true;\n    }\n    const actual = idTokenClaims[claim];\n    if (actual !== expected) {\n      return true;\n    }\n    return false;\n  };\n  return requiresLoginMiddleware.bind(undefined, authenticationCheck);\n};\nmodule.exports.claimIncludes = function claimIncludes(claim, ...expected) {\n  // check that claim is a string value\n  if (typeof claim !== 'string') {\n    throw new TypeError('\"claim\" must be a string');\n  }\n  // check that all expected are JSON supported primitives\n  expected.forEach(checkJSONprimitive);\n  const authenticationCheck = req => {\n    if (defaultRequiresLogin(req)) {\n      return true;\n    }\n    const {\n      idTokenClaims\n    } = req.oidc;\n    if (!(claim in idTokenClaims)) {\n      return true;\n    }\n    let actual = idTokenClaims[claim];\n    if (typeof actual === 'string') {\n      actual = actual.split(' ');\n    } else if (!Array.isArray(actual)) {\n      debug('unexpected claim type. expected array or string, got %o', typeof actual);\n      return true;\n    }\n    actual = new Set(actual);\n    return !expected.every(Set.prototype.has.bind(actual));\n  };\n  return requiresLoginMiddleware.bind(undefined, authenticationCheck);\n};\nmodule.exports.claimCheck = function claimCheck(func) {\n  // check that func is a function\n  if (typeof func !== 'function' || func.constructor.name !== 'Function') {\n    throw new TypeError('\"claimCheck\" expects a function');\n  }\n  const authenticationCheck = req => {\n    if (defaultRequiresLogin(req)) {\n      return true;\n    }\n    const {\n      idTokenClaims\n    } = req.oidc;\n    return !func(req, idTokenClaims);\n  };\n  return requiresLoginMiddleware.bind(undefined, authenticationCheck);\n};","map":{"version":3,"names":["createError","require","debug","defaultRequiresLogin","req","oidc","isAuthenticated","requiresLoginMiddleware","requiresLoginCheck","res","next","Error","errorOnRequiredAuth","accepts","login","Unauthorized","module","exports","requiresAuth","bind","undefined","checkJSONprimitive","value","TypeError","claimEquals","claim","expected","authenticationCheck","idTokenClaims","actual","claimIncludes","forEach","split","Array","isArray","Set","every","prototype","has","claimCheck","func","constructor","name"],"sources":["/Users/chamas/Final-Project/final-project/node_modules/express-openid-connect/middleware/requiresAuth.js"],"sourcesContent":["const createError = require('http-errors');\nconst debug = require('../lib/debug')('requiresAuth');\n\nconst defaultRequiresLogin = (req) => !req.oidc.isAuthenticated();\n\n/**\n * Returns a middleware that checks whether an end-user is authenticated.\n * If end-user is not authenticated `res.oidc.login()` is triggered for an HTTP\n * request that can perform a redirect.\n */\nasync function requiresLoginMiddleware(requiresLoginCheck, req, res, next) {\n  if (!req.oidc) {\n    next(\n      new Error('req.oidc is not found, did you include the auth middleware?')\n    );\n    return;\n  }\n\n  if (requiresLoginCheck(req)) {\n    if (!res.oidc.errorOnRequiredAuth && req.accepts('html')) {\n      debug(\n        'authentication requirements not met with errorOnRequiredAuth() returning false, calling res.oidc.login()'\n      );\n      return res.oidc.login();\n    }\n    debug(\n      'authentication requirements not met with errorOnRequiredAuth() returning true, calling next() with an Unauthorized error'\n    );\n    next(\n      createError.Unauthorized('Authentication is required for this route.')\n    );\n    return;\n  }\n\n  debug('authentication requirements met, calling next()');\n\n  next();\n}\n\nmodule.exports.requiresAuth = function requiresAuth(\n  requiresLoginCheck = defaultRequiresLogin\n) {\n  return requiresLoginMiddleware.bind(undefined, requiresLoginCheck);\n};\n\nfunction checkJSONprimitive(value) {\n  if (\n    typeof value !== 'string' &&\n    typeof value !== 'number' &&\n    typeof value !== 'boolean' &&\n    value !== null\n  ) {\n    throw new TypeError('\"expected\" must be a string, number, boolean or null');\n  }\n}\n\nmodule.exports.claimEquals = function claimEquals(claim, expected) {\n  // check that claim is a string value\n  if (typeof claim !== 'string') {\n    throw new TypeError('\"claim\" must be a string');\n  }\n  // check that expected is a JSON supported primitive\n  checkJSONprimitive(expected);\n\n  const authenticationCheck = (req) => {\n    if (defaultRequiresLogin(req)) {\n      return true;\n    }\n    const { idTokenClaims } = req.oidc;\n    if (!(claim in idTokenClaims)) {\n      return true;\n    }\n    const actual = idTokenClaims[claim];\n    if (actual !== expected) {\n      return true;\n    }\n\n    return false;\n  };\n  return requiresLoginMiddleware.bind(undefined, authenticationCheck);\n};\n\nmodule.exports.claimIncludes = function claimIncludes(claim, ...expected) {\n  // check that claim is a string value\n  if (typeof claim !== 'string') {\n    throw new TypeError('\"claim\" must be a string');\n  }\n  // check that all expected are JSON supported primitives\n  expected.forEach(checkJSONprimitive);\n\n  const authenticationCheck = (req) => {\n    if (defaultRequiresLogin(req)) {\n      return true;\n    }\n    const { idTokenClaims } = req.oidc;\n    if (!(claim in idTokenClaims)) {\n      return true;\n    }\n\n    let actual = idTokenClaims[claim];\n    if (typeof actual === 'string') {\n      actual = actual.split(' ');\n    } else if (!Array.isArray(actual)) {\n      debug(\n        'unexpected claim type. expected array or string, got %o',\n        typeof actual\n      );\n      return true;\n    }\n\n    actual = new Set(actual);\n\n    return !expected.every(Set.prototype.has.bind(actual));\n  };\n  return requiresLoginMiddleware.bind(undefined, authenticationCheck);\n};\n\nmodule.exports.claimCheck = function claimCheck(func) {\n  // check that func is a function\n  if (typeof func !== 'function' || func.constructor.name !== 'Function') {\n    throw new TypeError('\"claimCheck\" expects a function');\n  }\n  const authenticationCheck = (req) => {\n    if (defaultRequiresLogin(req)) {\n      return true;\n    }\n\n    const { idTokenClaims } = req.oidc;\n\n    return !func(req, idTokenClaims);\n  };\n  return requiresLoginMiddleware.bind(undefined, authenticationCheck);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}