{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StripeResource = void 0;\nconst utils_js_1 = require(\"./utils.js\");\nconst StripeMethod_js_1 = require(\"./StripeMethod.js\");\n// Provide extension mechanism for Stripe Resource Sub-Classes\nStripeResource.extend = utils_js_1.protoExtend;\n// Expose method-creator\nStripeResource.method = StripeMethod_js_1.stripeMethod;\nStripeResource.MAX_BUFFERED_REQUEST_METRICS = 100;\n/**\n * Encapsulates request logic for a Stripe Resource\n */\nfunction StripeResource(stripe, deprecatedUrlData) {\n  this._stripe = stripe;\n  if (deprecatedUrlData) {\n    throw new Error('Support for curried url params was dropped in stripe-node v7.0.0. Instead, pass two ids.');\n  }\n  this.basePath = (0, utils_js_1.makeURLInterpolator)(\n  // @ts-ignore changing type of basePath\n  this.basePath || stripe.getApiField('basePath'));\n  // @ts-ignore changing type of path\n  this.resourcePath = this.path;\n  // @ts-ignore changing type of path\n  this.path = (0, utils_js_1.makeURLInterpolator)(this.path);\n  this.initialize(...arguments);\n}\nexports.StripeResource = StripeResource;\nStripeResource.prototype = {\n  _stripe: null,\n  // @ts-ignore the type of path changes in ctor\n  path: '',\n  resourcePath: '',\n  // Methods that don't use the API's default '/v1' path can override it with this setting.\n  basePath: null,\n  initialize() {},\n  // Function to override the default data processor. This allows full control\n  // over how a StripeResource's request data will get converted into an HTTP\n  // body. This is useful for non-standard HTTP requests. The function should\n  // take method name, data, and headers as arguments.\n  requestDataProcessor: null,\n  // Function to add a validation checks before sending the request, errors should\n  // be thrown, and they will be passed to the callback/promise.\n  validateRequest: null,\n  createFullPath(commandPath, urlData) {\n    const urlParts = [this.basePath(urlData), this.path(urlData)];\n    if (typeof commandPath === 'function') {\n      const computedCommandPath = commandPath(urlData);\n      // If we have no actual command path, we just omit it to avoid adding a\n      // trailing slash. This is important for top-level listing requests, which\n      // do not have a command path.\n      if (computedCommandPath) {\n        urlParts.push(computedCommandPath);\n      }\n    } else {\n      urlParts.push(commandPath);\n    }\n    return this._joinUrlParts(urlParts);\n  },\n  // Creates a relative resource path with symbols left in (unlike\n  // createFullPath which takes some data to replace them with). For example it\n  // might produce: /invoices/{id}\n  createResourcePathWithSymbols(pathWithSymbols) {\n    // If there is no path beyond the resource path, we want to produce just\n    // /<resource path> rather than /<resource path>/.\n    if (pathWithSymbols) {\n      return `/${this._joinUrlParts([this.resourcePath, pathWithSymbols])}`;\n    } else {\n      return `/${this.resourcePath}`;\n    }\n  },\n  _joinUrlParts(parts) {\n    // Replace any accidentally doubled up slashes. This previously used\n    // path.join, which would do this as well. Unfortunately we need to do this\n    // as the functions for creating paths are technically part of the public\n    // interface and so we need to preserve backwards compatibility.\n    return parts.join('/').replace(/\\/{2,}/g, '/');\n  },\n  _getRequestOpts(requestArgs, spec, overrideData) {\n    // Extract spec values with defaults.\n    const requestMethod = (spec.method || 'GET').toUpperCase();\n    const usage = spec.usage || [];\n    const urlParams = spec.urlParams || [];\n    const encode = spec.encode || (data => data);\n    const isUsingFullPath = !!spec.fullPath;\n    const commandPath = (0, utils_js_1.makeURLInterpolator)(isUsingFullPath ? spec.fullPath : spec.path || '');\n    // When using fullPath, we ignore the resource path as it should already be\n    // fully qualified.\n    const path = isUsingFullPath ? spec.fullPath : this.createResourcePathWithSymbols(spec.path);\n    // Don't mutate args externally.\n    const args = [].slice.call(requestArgs);\n    // Generate and validate url params.\n    const urlData = urlParams.reduce((urlData, param) => {\n      const arg = args.shift();\n      if (typeof arg !== 'string') {\n        throw new Error(`Stripe: Argument \"${param}\" must be a string, but got: ${arg} (on API request to \\`${requestMethod} ${path}\\`)`);\n      }\n      urlData[param] = arg;\n      return urlData;\n    }, {});\n    // Pull request data and options (headers, auth) from args.\n    const dataFromArgs = (0, utils_js_1.getDataFromArgs)(args);\n    const data = encode(Object.assign({}, dataFromArgs, overrideData));\n    const options = (0, utils_js_1.getOptionsFromArgs)(args);\n    const host = options.host || spec.host;\n    const streaming = !!spec.streaming;\n    // Validate that there are no more args.\n    if (args.filter(x => x != null).length) {\n      throw new Error(`Stripe: Unknown arguments (${args}). Did you mean to pass an options object? See https://github.com/stripe/stripe-node/wiki/Passing-Options. (on API request to ${requestMethod} \\`${path}\\`)`);\n    }\n    // When using full path, we can just invoke the URL interpolator directly\n    // as we don't need to use the resource to create a full path.\n    const requestPath = isUsingFullPath ? commandPath(urlData) : this.createFullPath(commandPath, urlData);\n    const headers = Object.assign(options.headers, spec.headers);\n    if (spec.validator) {\n      spec.validator(data, {\n        headers\n      });\n    }\n    const dataInQuery = spec.method === 'GET' || spec.method === 'DELETE';\n    const bodyData = dataInQuery ? {} : data;\n    const queryData = dataInQuery ? data : {};\n    return {\n      requestMethod,\n      requestPath,\n      bodyData,\n      queryData,\n      auth: options.auth,\n      headers,\n      host: host !== null && host !== void 0 ? host : null,\n      streaming,\n      settings: options.settings,\n      usage\n    };\n  },\n  _makeRequest(requestArgs, spec, overrideData) {\n    return new Promise((resolve, reject) => {\n      var _a;\n      let opts;\n      try {\n        opts = this._getRequestOpts(requestArgs, spec, overrideData);\n      } catch (err) {\n        reject(err);\n        return;\n      }\n      function requestCallback(err, response) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(spec.transformResponseData ? spec.transformResponseData(response) : response);\n        }\n      }\n      const emptyQuery = Object.keys(opts.queryData).length === 0;\n      const path = [opts.requestPath, emptyQuery ? '' : '?', (0, utils_js_1.stringifyRequestData)(opts.queryData)].join('');\n      const {\n        headers,\n        settings\n      } = opts;\n      this._stripe._requestSender._request(opts.requestMethod, opts.host, path, opts.bodyData, opts.auth, {\n        headers,\n        settings,\n        streaming: opts.streaming\n      }, opts.usage, requestCallback, (_a = this.requestDataProcessor) === null || _a === void 0 ? void 0 : _a.bind(this));\n    });\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","StripeResource","utils_js_1","require","StripeMethod_js_1","extend","protoExtend","method","stripeMethod","MAX_BUFFERED_REQUEST_METRICS","stripe","deprecatedUrlData","_stripe","Error","basePath","makeURLInterpolator","getApiField","resourcePath","path","initialize","arguments","prototype","requestDataProcessor","validateRequest","createFullPath","commandPath","urlData","urlParts","computedCommandPath","push","_joinUrlParts","createResourcePathWithSymbols","pathWithSymbols","parts","join","replace","_getRequestOpts","requestArgs","spec","overrideData","requestMethod","toUpperCase","usage","urlParams","encode","data","isUsingFullPath","fullPath","args","slice","call","reduce","param","arg","shift","dataFromArgs","getDataFromArgs","assign","options","getOptionsFromArgs","host","streaming","filter","x","length","requestPath","headers","validator","dataInQuery","bodyData","queryData","auth","settings","_makeRequest","Promise","resolve","reject","_a","opts","err","requestCallback","response","transformResponseData","emptyQuery","keys","stringifyRequestData","_requestSender","_request","bind"],"sources":["/Users/chamas/Final-Project/final-project/node_modules/stripe/cjs/StripeResource.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StripeResource = void 0;\nconst utils_js_1 = require(\"./utils.js\");\nconst StripeMethod_js_1 = require(\"./StripeMethod.js\");\n// Provide extension mechanism for Stripe Resource Sub-Classes\nStripeResource.extend = utils_js_1.protoExtend;\n// Expose method-creator\nStripeResource.method = StripeMethod_js_1.stripeMethod;\nStripeResource.MAX_BUFFERED_REQUEST_METRICS = 100;\n/**\n * Encapsulates request logic for a Stripe Resource\n */\nfunction StripeResource(stripe, deprecatedUrlData) {\n    this._stripe = stripe;\n    if (deprecatedUrlData) {\n        throw new Error('Support for curried url params was dropped in stripe-node v7.0.0. Instead, pass two ids.');\n    }\n    this.basePath = (0, utils_js_1.makeURLInterpolator)(\n    // @ts-ignore changing type of basePath\n    this.basePath || stripe.getApiField('basePath'));\n    // @ts-ignore changing type of path\n    this.resourcePath = this.path;\n    // @ts-ignore changing type of path\n    this.path = (0, utils_js_1.makeURLInterpolator)(this.path);\n    this.initialize(...arguments);\n}\nexports.StripeResource = StripeResource;\nStripeResource.prototype = {\n    _stripe: null,\n    // @ts-ignore the type of path changes in ctor\n    path: '',\n    resourcePath: '',\n    // Methods that don't use the API's default '/v1' path can override it with this setting.\n    basePath: null,\n    initialize() { },\n    // Function to override the default data processor. This allows full control\n    // over how a StripeResource's request data will get converted into an HTTP\n    // body. This is useful for non-standard HTTP requests. The function should\n    // take method name, data, and headers as arguments.\n    requestDataProcessor: null,\n    // Function to add a validation checks before sending the request, errors should\n    // be thrown, and they will be passed to the callback/promise.\n    validateRequest: null,\n    createFullPath(commandPath, urlData) {\n        const urlParts = [this.basePath(urlData), this.path(urlData)];\n        if (typeof commandPath === 'function') {\n            const computedCommandPath = commandPath(urlData);\n            // If we have no actual command path, we just omit it to avoid adding a\n            // trailing slash. This is important for top-level listing requests, which\n            // do not have a command path.\n            if (computedCommandPath) {\n                urlParts.push(computedCommandPath);\n            }\n        }\n        else {\n            urlParts.push(commandPath);\n        }\n        return this._joinUrlParts(urlParts);\n    },\n    // Creates a relative resource path with symbols left in (unlike\n    // createFullPath which takes some data to replace them with). For example it\n    // might produce: /invoices/{id}\n    createResourcePathWithSymbols(pathWithSymbols) {\n        // If there is no path beyond the resource path, we want to produce just\n        // /<resource path> rather than /<resource path>/.\n        if (pathWithSymbols) {\n            return `/${this._joinUrlParts([this.resourcePath, pathWithSymbols])}`;\n        }\n        else {\n            return `/${this.resourcePath}`;\n        }\n    },\n    _joinUrlParts(parts) {\n        // Replace any accidentally doubled up slashes. This previously used\n        // path.join, which would do this as well. Unfortunately we need to do this\n        // as the functions for creating paths are technically part of the public\n        // interface and so we need to preserve backwards compatibility.\n        return parts.join('/').replace(/\\/{2,}/g, '/');\n    },\n    _getRequestOpts(requestArgs, spec, overrideData) {\n        // Extract spec values with defaults.\n        const requestMethod = (spec.method || 'GET').toUpperCase();\n        const usage = spec.usage || [];\n        const urlParams = spec.urlParams || [];\n        const encode = spec.encode || ((data) => data);\n        const isUsingFullPath = !!spec.fullPath;\n        const commandPath = (0, utils_js_1.makeURLInterpolator)(isUsingFullPath ? spec.fullPath : spec.path || '');\n        // When using fullPath, we ignore the resource path as it should already be\n        // fully qualified.\n        const path = isUsingFullPath\n            ? spec.fullPath\n            : this.createResourcePathWithSymbols(spec.path);\n        // Don't mutate args externally.\n        const args = [].slice.call(requestArgs);\n        // Generate and validate url params.\n        const urlData = urlParams.reduce((urlData, param) => {\n            const arg = args.shift();\n            if (typeof arg !== 'string') {\n                throw new Error(`Stripe: Argument \"${param}\" must be a string, but got: ${arg} (on API request to \\`${requestMethod} ${path}\\`)`);\n            }\n            urlData[param] = arg;\n            return urlData;\n        }, {});\n        // Pull request data and options (headers, auth) from args.\n        const dataFromArgs = (0, utils_js_1.getDataFromArgs)(args);\n        const data = encode(Object.assign({}, dataFromArgs, overrideData));\n        const options = (0, utils_js_1.getOptionsFromArgs)(args);\n        const host = options.host || spec.host;\n        const streaming = !!spec.streaming;\n        // Validate that there are no more args.\n        if (args.filter((x) => x != null).length) {\n            throw new Error(`Stripe: Unknown arguments (${args}). Did you mean to pass an options object? See https://github.com/stripe/stripe-node/wiki/Passing-Options. (on API request to ${requestMethod} \\`${path}\\`)`);\n        }\n        // When using full path, we can just invoke the URL interpolator directly\n        // as we don't need to use the resource to create a full path.\n        const requestPath = isUsingFullPath\n            ? commandPath(urlData)\n            : this.createFullPath(commandPath, urlData);\n        const headers = Object.assign(options.headers, spec.headers);\n        if (spec.validator) {\n            spec.validator(data, { headers });\n        }\n        const dataInQuery = spec.method === 'GET' || spec.method === 'DELETE';\n        const bodyData = dataInQuery ? {} : data;\n        const queryData = dataInQuery ? data : {};\n        return {\n            requestMethod,\n            requestPath,\n            bodyData,\n            queryData,\n            auth: options.auth,\n            headers,\n            host: host !== null && host !== void 0 ? host : null,\n            streaming,\n            settings: options.settings,\n            usage,\n        };\n    },\n    _makeRequest(requestArgs, spec, overrideData) {\n        return new Promise((resolve, reject) => {\n            var _a;\n            let opts;\n            try {\n                opts = this._getRequestOpts(requestArgs, spec, overrideData);\n            }\n            catch (err) {\n                reject(err);\n                return;\n            }\n            function requestCallback(err, response) {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(spec.transformResponseData\n                        ? spec.transformResponseData(response)\n                        : response);\n                }\n            }\n            const emptyQuery = Object.keys(opts.queryData).length === 0;\n            const path = [\n                opts.requestPath,\n                emptyQuery ? '' : '?',\n                (0, utils_js_1.stringifyRequestData)(opts.queryData),\n            ].join('');\n            const { headers, settings } = opts;\n            this._stripe._requestSender._request(opts.requestMethod, opts.host, path, opts.bodyData, opts.auth, { headers, settings, streaming: opts.streaming }, opts.usage, requestCallback, (_a = this.requestDataProcessor) === null || _a === void 0 ? void 0 : _a.bind(this));\n        });\n    },\n};\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,cAAc,GAAG,KAAK,CAAC;AAC/B,MAAMC,UAAU,GAAGC,OAAO,CAAC,YAAY,CAAC;AACxC,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AACtD;AACAF,cAAc,CAACI,MAAM,GAAGH,UAAU,CAACI,WAAW;AAC9C;AACAL,cAAc,CAACM,MAAM,GAAGH,iBAAiB,CAACI,YAAY;AACtDP,cAAc,CAACQ,4BAA4B,GAAG,GAAG;AACjD;AACA;AACA;AACA,SAASR,cAAcA,CAACS,MAAM,EAAEC,iBAAiB,EAAE;EAC/C,IAAI,CAACC,OAAO,GAAGF,MAAM;EACrB,IAAIC,iBAAiB,EAAE;IACnB,MAAM,IAAIE,KAAK,CAAC,0FAA0F,CAAC;EAC/G;EACA,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC,EAAEZ,UAAU,CAACa,mBAAmB;EAClD;EACA,IAAI,CAACD,QAAQ,IAAIJ,MAAM,CAACM,WAAW,CAAC,UAAU,CAAC,CAAC;EAChD;EACA,IAAI,CAACC,YAAY,GAAG,IAAI,CAACC,IAAI;EAC7B;EACA,IAAI,CAACA,IAAI,GAAG,CAAC,CAAC,EAAEhB,UAAU,CAACa,mBAAmB,EAAE,IAAI,CAACG,IAAI,CAAC;EAC1D,IAAI,CAACC,UAAU,CAAC,GAAGC,SAAS,CAAC;AACjC;AACArB,OAAO,CAACE,cAAc,GAAGA,cAAc;AACvCA,cAAc,CAACoB,SAAS,GAAG;EACvBT,OAAO,EAAE,IAAI;EACb;EACAM,IAAI,EAAE,EAAE;EACRD,YAAY,EAAE,EAAE;EAChB;EACAH,QAAQ,EAAE,IAAI;EACdK,UAAUA,CAAA,EAAG,CAAE,CAAC;EAChB;EACA;EACA;EACA;EACAG,oBAAoB,EAAE,IAAI;EAC1B;EACA;EACAC,eAAe,EAAE,IAAI;EACrBC,cAAcA,CAACC,WAAW,EAAEC,OAAO,EAAE;IACjC,MAAMC,QAAQ,GAAG,CAAC,IAAI,CAACb,QAAQ,CAACY,OAAO,CAAC,EAAE,IAAI,CAACR,IAAI,CAACQ,OAAO,CAAC,CAAC;IAC7D,IAAI,OAAOD,WAAW,KAAK,UAAU,EAAE;MACnC,MAAMG,mBAAmB,GAAGH,WAAW,CAACC,OAAO,CAAC;MAChD;MACA;MACA;MACA,IAAIE,mBAAmB,EAAE;QACrBD,QAAQ,CAACE,IAAI,CAACD,mBAAmB,CAAC;MACtC;IACJ,CAAC,MACI;MACDD,QAAQ,CAACE,IAAI,CAACJ,WAAW,CAAC;IAC9B;IACA,OAAO,IAAI,CAACK,aAAa,CAACH,QAAQ,CAAC;EACvC,CAAC;EACD;EACA;EACA;EACAI,6BAA6BA,CAACC,eAAe,EAAE;IAC3C;IACA;IACA,IAAIA,eAAe,EAAE;MACjB,OAAQ,IAAG,IAAI,CAACF,aAAa,CAAC,CAAC,IAAI,CAACb,YAAY,EAAEe,eAAe,CAAC,CAAE,EAAC;IACzE,CAAC,MACI;MACD,OAAQ,IAAG,IAAI,CAACf,YAAa,EAAC;IAClC;EACJ,CAAC;EACDa,aAAaA,CAACG,KAAK,EAAE;IACjB;IACA;IACA;IACA;IACA,OAAOA,KAAK,CAACC,IAAI,CAAC,GAAG,CAAC,CAACC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC;EAClD,CAAC;EACDC,eAAeA,CAACC,WAAW,EAAEC,IAAI,EAAEC,YAAY,EAAE;IAC7C;IACA,MAAMC,aAAa,GAAG,CAACF,IAAI,CAAC/B,MAAM,IAAI,KAAK,EAAEkC,WAAW,CAAC,CAAC;IAC1D,MAAMC,KAAK,GAAGJ,IAAI,CAACI,KAAK,IAAI,EAAE;IAC9B,MAAMC,SAAS,GAAGL,IAAI,CAACK,SAAS,IAAI,EAAE;IACtC,MAAMC,MAAM,GAAGN,IAAI,CAACM,MAAM,KAAMC,IAAI,IAAKA,IAAI,CAAC;IAC9C,MAAMC,eAAe,GAAG,CAAC,CAACR,IAAI,CAACS,QAAQ;IACvC,MAAMtB,WAAW,GAAG,CAAC,CAAC,EAAEvB,UAAU,CAACa,mBAAmB,EAAE+B,eAAe,GAAGR,IAAI,CAACS,QAAQ,GAAGT,IAAI,CAACpB,IAAI,IAAI,EAAE,CAAC;IAC1G;IACA;IACA,MAAMA,IAAI,GAAG4B,eAAe,GACtBR,IAAI,CAACS,QAAQ,GACb,IAAI,CAAChB,6BAA6B,CAACO,IAAI,CAACpB,IAAI,CAAC;IACnD;IACA,MAAM8B,IAAI,GAAG,EAAE,CAACC,KAAK,CAACC,IAAI,CAACb,WAAW,CAAC;IACvC;IACA,MAAMX,OAAO,GAAGiB,SAAS,CAACQ,MAAM,CAAC,CAACzB,OAAO,EAAE0B,KAAK,KAAK;MACjD,MAAMC,GAAG,GAAGL,IAAI,CAACM,KAAK,CAAC,CAAC;MACxB,IAAI,OAAOD,GAAG,KAAK,QAAQ,EAAE;QACzB,MAAM,IAAIxC,KAAK,CAAE,qBAAoBuC,KAAM,gCAA+BC,GAAI,yBAAwBb,aAAc,IAAGtB,IAAK,KAAI,CAAC;MACrI;MACAQ,OAAO,CAAC0B,KAAK,CAAC,GAAGC,GAAG;MACpB,OAAO3B,OAAO;IAClB,CAAC,EAAE,CAAC,CAAC,CAAC;IACN;IACA,MAAM6B,YAAY,GAAG,CAAC,CAAC,EAAErD,UAAU,CAACsD,eAAe,EAAER,IAAI,CAAC;IAC1D,MAAMH,IAAI,GAAGD,MAAM,CAAC/C,MAAM,CAAC4D,MAAM,CAAC,CAAC,CAAC,EAAEF,YAAY,EAAEhB,YAAY,CAAC,CAAC;IAClE,MAAMmB,OAAO,GAAG,CAAC,CAAC,EAAExD,UAAU,CAACyD,kBAAkB,EAAEX,IAAI,CAAC;IACxD,MAAMY,IAAI,GAAGF,OAAO,CAACE,IAAI,IAAItB,IAAI,CAACsB,IAAI;IACtC,MAAMC,SAAS,GAAG,CAAC,CAACvB,IAAI,CAACuB,SAAS;IAClC;IACA,IAAIb,IAAI,CAACc,MAAM,CAAEC,CAAC,IAAKA,CAAC,IAAI,IAAI,CAAC,CAACC,MAAM,EAAE;MACtC,MAAM,IAAInD,KAAK,CAAE,8BAA6BmC,IAAK,iIAAgIR,aAAc,MAAKtB,IAAK,KAAI,CAAC;IACpN;IACA;IACA;IACA,MAAM+C,WAAW,GAAGnB,eAAe,GAC7BrB,WAAW,CAACC,OAAO,CAAC,GACpB,IAAI,CAACF,cAAc,CAACC,WAAW,EAAEC,OAAO,CAAC;IAC/C,MAAMwC,OAAO,GAAGrE,MAAM,CAAC4D,MAAM,CAACC,OAAO,CAACQ,OAAO,EAAE5B,IAAI,CAAC4B,OAAO,CAAC;IAC5D,IAAI5B,IAAI,CAAC6B,SAAS,EAAE;MAChB7B,IAAI,CAAC6B,SAAS,CAACtB,IAAI,EAAE;QAAEqB;MAAQ,CAAC,CAAC;IACrC;IACA,MAAME,WAAW,GAAG9B,IAAI,CAAC/B,MAAM,KAAK,KAAK,IAAI+B,IAAI,CAAC/B,MAAM,KAAK,QAAQ;IACrE,MAAM8D,QAAQ,GAAGD,WAAW,GAAG,CAAC,CAAC,GAAGvB,IAAI;IACxC,MAAMyB,SAAS,GAAGF,WAAW,GAAGvB,IAAI,GAAG,CAAC,CAAC;IACzC,OAAO;MACHL,aAAa;MACbyB,WAAW;MACXI,QAAQ;MACRC,SAAS;MACTC,IAAI,EAAEb,OAAO,CAACa,IAAI;MAClBL,OAAO;MACPN,IAAI,EAAEA,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAGA,IAAI,GAAG,IAAI;MACpDC,SAAS;MACTW,QAAQ,EAAEd,OAAO,CAACc,QAAQ;MAC1B9B;IACJ,CAAC;EACL,CAAC;EACD+B,YAAYA,CAACpC,WAAW,EAAEC,IAAI,EAAEC,YAAY,EAAE;IAC1C,OAAO,IAAImC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACpC,IAAIC,EAAE;MACN,IAAIC,IAAI;MACR,IAAI;QACAA,IAAI,GAAG,IAAI,CAAC1C,eAAe,CAACC,WAAW,EAAEC,IAAI,EAAEC,YAAY,CAAC;MAChE,CAAC,CACD,OAAOwC,GAAG,EAAE;QACRH,MAAM,CAACG,GAAG,CAAC;QACX;MACJ;MACA,SAASC,eAAeA,CAACD,GAAG,EAAEE,QAAQ,EAAE;QACpC,IAAIF,GAAG,EAAE;UACLH,MAAM,CAACG,GAAG,CAAC;QACf,CAAC,MACI;UACDJ,OAAO,CAACrC,IAAI,CAAC4C,qBAAqB,GAC5B5C,IAAI,CAAC4C,qBAAqB,CAACD,QAAQ,CAAC,GACpCA,QAAQ,CAAC;QACnB;MACJ;MACA,MAAME,UAAU,GAAGtF,MAAM,CAACuF,IAAI,CAACN,IAAI,CAACR,SAAS,CAAC,CAACN,MAAM,KAAK,CAAC;MAC3D,MAAM9C,IAAI,GAAG,CACT4D,IAAI,CAACb,WAAW,EAChBkB,UAAU,GAAG,EAAE,GAAG,GAAG,EACrB,CAAC,CAAC,EAAEjF,UAAU,CAACmF,oBAAoB,EAAEP,IAAI,CAACR,SAAS,CAAC,CACvD,CAACpC,IAAI,CAAC,EAAE,CAAC;MACV,MAAM;QAAEgC,OAAO;QAAEM;MAAS,CAAC,GAAGM,IAAI;MAClC,IAAI,CAAClE,OAAO,CAAC0E,cAAc,CAACC,QAAQ,CAACT,IAAI,CAACtC,aAAa,EAAEsC,IAAI,CAAClB,IAAI,EAAE1C,IAAI,EAAE4D,IAAI,CAACT,QAAQ,EAAES,IAAI,CAACP,IAAI,EAAE;QAAEL,OAAO;QAAEM,QAAQ;QAAEX,SAAS,EAAEiB,IAAI,CAACjB;MAAU,CAAC,EAAEiB,IAAI,CAACpC,KAAK,EAAEsC,eAAe,EAAE,CAACH,EAAE,GAAG,IAAI,CAACvD,oBAAoB,MAAM,IAAI,IAAIuD,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACW,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3Q,CAAC,CAAC;EACN;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}